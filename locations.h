/*****************************************************************************/

/***** Main data array (direct pointers) *************************************/

enum block_DATA {

/* Data sizes */

  DATA_ASCII_DATA_SIZE,
  DATA_ALLOC_MAIN_SIZE,
  DATA_REAL_MAIN_SIZE,
  DATA_ALLOC_ACE_SIZE,
  DATA_REAL_ACE_SIZE,
  DATA_ALLOC_PRIVA_SIZE,
  DATA_REAL_PRIVA_SIZE,
  DATA_ALLOC_RES1_SIZE,
  DATA_REAL_RES1_SIZE,
  DATA_ALLOC_RES2_SIZE,
  DATA_REAL_RES2_SIZE,
  DATA_ALLOC_BUF_SIZE,
  DATA_REAL_BUF_SIZE,
  DATA_ALLOC_RES3_SIZE,
  DATA_REAL_RES3_SIZE,

  DATA_TOTAL_BYTES,
  DATA_REAL_BYTES,
  DATA_BYTE_COUNT,

  DATA_TOT_XS_BYTES,
  DATA_TOT_MAT_BYTES,
  DATA_TOT_RES_BYTES,
  DATA_TOT_RMX_BYTES,
  DATA_TOT_MISC_BYTES,
  DATA_TOT_IFC_BYTES,

/* CPU name and memory size */

  DATA_CPU_MEM,
  DATA_PTR_CPU_NAME,
  DATA_CPU_MHZ,

/* Date */

  DATA_PTR_DATE,

/* Title */

  DATA_PTR_TITLE,

/* Host name, working directory and compile date */

  DATA_PTR_HOSTNAME,
  DATA_PTR_WORKDIR,
  DATA_PTR_COMPILE_DATE,

/* CPU time */

  DATA_CPU_T0,
  DATA_CPU_TIME,

/* List pointers */

  DATA_PTR_S0,
  DATA_PTR_T0,
  DATA_PTR_M0,
  DATA_PTR_NUC0,
  DATA_PTR_ACE0,
  DATA_PTR_DECAY_ACE0,
  DATA_PTR_TRANSMU_ACE0,
  DATA_PTR_C0,
  DATA_PTR_NST0,
  DATA_PTR_TR0,
  DATA_PTR_GPL0,
  DATA_PTR_MPL0,
  DATA_PTR_PB0,
  DATA_PTR_L0,
  DATA_PTR_LVL0,
  DATA_PTR_SCORE0,
  DATA_PTR_U0,
  DATA_PTR_SRC0,
  DATA_PTR_DET0,
  DATA_PTR_ENE0,
  DATA_PTR_GCU0,
  DATA_PTR_IFC0,
  DATA_PTR_DATAIFC0,
  DATA_PTR_DIV0,
  DATA_PTR_MVOL0,
  DATA_PTR_SYM0,
  DATA_PTR_REP0,
  DATA_PTR_TME0,
  DATA_PTR_FUN0,
  DATA_PTR_RIA0,
  DATA_PTR_ADF0,
  DATA_PTR_PPW0,
  DATA_PTR_MORA0,
  DATA_PTR_ICM0,
  DATA_PTR_CSM0,
  DATA_PTR_MESH0,
  DATA_PTR_UMSH0,
  DATA_PTR_STL0,
  DATA_PTR_FIN0,
  DATA_PTR_BRA0,
  DATA_PTR_COEF0,
  DATA_PTR_HISV0,
  DATA_PTR_ALB0,	
  DATA_PTR_MFLOW0,
  DATA_PTR_WWD0,
  DATA_PTR_RMX0,
  DATA_PTR_FINBIN0,
  DATA_PTR_TRC0,
  DATA_PTR_FIX_BRA0,
  DATA_PTR_MDEP0,
  DATA_PTR_AUX0,
  DATA_PTR_SAMPLE0,
  DATA_PTR_OTF_BURN0,
  DATA_PTR_IMP0,
  DATA_PTR_SENS0,
  DATA_PTR_COVMTX0,
  DATA_PTR_COVBLOCK0,
  DATA_PTR_CASEMTX0,
  DATA_PTR_VP0,

/* File names and paths */

  DATA_PTR_ACEDATA_FNAME_LIST,
  DATA_PTR_ORIG_INPUT_FNAME,
  DATA_PTR_INPUT_FNAME,
  DATA_PTR_DECDATA_FNAME_LIST,
  DATA_PTR_NFYDATA_FNAME_LIST,
  DATA_PTR_SFYDATA_FNAME_LIST,
  DATA_PTR_BRADATA_FNAME_LIST,
  DATA_PTR_XSTEST_FNAME,
  DATA_PTR_COVERXDATA_FNAME_LIST,

/* Stuff for burnup calculation */

  DATA_PTR_COEF_BU_PT,
  DATA_MORE_COEF_CALC,
  DATA_BU_SPECTRUM_COLLAPSE,
  DATA_BU_URES_EMIN,
  DATA_BU_URES_EMAX,
  DATA_BU_ACT_MIN_Z,
  DATA_BU_ACT_MAX_Z,
  DATA_MAX_DIV_SEP_LVL,
  DATA_OTF_BURN_MODE,        
  DATA_OTF_BURN_NUC_LIST,
  DATA_BURN_CALC_NSF,
  DATA_BURN_RANDOMIZE_DEC,
  DATA_BURN_RANDOMIZE_FY,	

/* Nuclide counters */

  DATA_N_TOT_NUCLIDES,
  DATA_N_TRANSPORT_NUCLIDES,
  DATA_N_DOSIMETRY_NUCLIDES,
  DATA_N_DECAY_NUCLIDES,
  DATA_N_PHOTON_NUCLIDES,
  DATA_N_PHOTON_PROD_DATA,

/* List of outer boundaries */

  DATA_PTR_OUTER_BOUNDS,

/* Geometry level data */

  DATA_PTR_ROOT_UNIVERSE,
  DATA_GEOM_LEVELS,
  DATA_PTR_COLLISION_UNI,
  DATA_PTR_UNDEFINED_CELL,
  DATA_IGNORE_UNDEFINED_CELLS,
  DATA_REMOVE_VOID_CELLS,

  DATA_MAX_UNDEF_POS,
  DATA_UNDEF_POS_COUNT,

/* Global zone index */

  DATA_PTR_ZONE_IDX,

/* Geometry dimensions */

  DATA_GEOM_MINX,
  DATA_GEOM_MAXX,
  DATA_GEOM_MINY,
  DATA_GEOM_MAXY,
  DATA_GEOM_MINZ,
  DATA_GEOM_MAXZ,

  DATA_GEOM_DIM,

/* ACE data pointers */

  DATA_PTR_ACE_NFY_DATA,
  DATA_PTR_ACE_SFY_DATA,

/* Fission product lists. (These are used to find the  */
/* ace data for FP nuclides in CombineFissionYields()) */

  DATA_TOT_FP_NUCLIDES,
  DATA_PTR_FP_LIB_ID_LIST,
  DATA_PTR_FP_ZAI_LIST,
  DATA_PTR_AC_ZAI_LIST,

/* Pointer to lost nuclide data */

  DATA_PTR_NUCLIDE_LOST,

/* Reaction counters */

  DATA_N_TRANSPORT_REA,
  DATA_N_SPECIAL_REA,
  DATA_N_DECAY_REA,
  DATA_N_TRANSMUTATION_REA,
  DATA_N_TRANSPORT_BRANCH,
  DATA_N_DECAY_BRANCH,
  DATA_N_DEAD_PATH,

/* Delayed neutron precursor groups */

  DATA_PRECURSOR_GROUPS,

/* Counters */

  DATA_N_GEOM_PLOTS,
  DATA_N_PBED,
  DATA_N_MATERIALS,
  DATA_N_BURN_MATERIALS,
  DATA_N_TOT_CELLS,
  DATA_N_UNION_CELLS,

/* Global and unionized energy grid data */

  DATA_ERG_TOL,
  DATA_ERG_INITIAL_PTS,
  DATA_ERG_IMPORTANT_PTS,
  DATA_ERG_PTR_UNIONIZED_NGRID,
  DATA_ERG_PTR_UNIONIZED_PGRID,

/* Minimum and maximum energy allowed in transport calculation */

  DATA_NEUTRON_ECUT,
  DATA_PHOTON_ECUT,

  DATA_NEUTRON_EMIN,
  DATA_NEUTRON_EMAX,

  DATA_PHOTON_EMIN,
  DATA_PHOTON_EMAX,

  DATA_NEUTRON_XS_EMIN,
  DATA_NEUTRON_XS_EMAX,

  DATA_PHOTON_XS_EMIN,
  DATA_PHOTON_XS_EMAX,

/* Minimum macroscopic cross section */

  DATA_MIN_NMACROXS,
  DATA_MIN_PMACROXS,

/* Boundary condition and albedo */

  DATA_STOP_AT_BOUNDARY,
  DATA_GEOM_BC0,
  DATA_GEOM_BC1,
  DATA_GEOM_BC2,
  DATA_GEOM_BC3,
  DATA_GEOM_ALBEDO1,
  DATA_GEOM_ALBEDO2,
  DATA_GEOM_ALBEDO3,

/* Cut-offs */

  DATA_DEP_TTA_CUTOFF,
  DATA_DEP_HALF_LIFE_CUTOFF,
  DATA_DEP_FP_YIELD_CUTOFF,
  DATA_MIN_TOTXS,
  DATA_URES_DILU_CUT,
  DATA_TIME_CUT_TMIN,
  DATA_TIME_CUT_TMAX,
  DATA_GEN_CUT,
  DATA_MAX_PROMPT_CHAIN_LENGTH,

  DATA_DEP_TRANSMU_REA_LIST,

/* Equilibrium Xe-135 calculation */

  DATA_XE135_DC,
  DATA_XE135M_DC,
  DATA_I135_DC,
  DATA_I135_BR,
  DATA_PM147_DC,
  DATA_PM148_DC,
  DATA_PM148M_DC,
  DATA_PM149_DC,

  DATA_XENON_EQUILIBRIUM_MODE,
  DATA_SAMARIUM_EQUILIBRIUM_MODE,
  DATA_PTR_XENON_MAT_LIST,
  DATA_PTR_SAMARIUM_MAT_LIST,

/* Nuclides included in BA chain */

  DATA_PTR_BA_CHAIN,

/* Xenon entropy */

  DATA_XENON_ENTROPY,

/* Warning messages */

  DATA_WARN_NFY_SUM,
  DATA_WARN_SFY_SUM,
  DATA_WARN_ERROR_AWR,
  DATA_WARN_ERROR_BRANCH,

/* k-eff iteration */

  DATA_ITER_MODE,
  DATA_ITER_KEFF,
  DATA_ITER_NCYC,
  DATA_ITER_VAL,
  DATA_ITER_FIX,

  DATA_ITER_ALB_F1,
  DATA_ITER_ALB_F2,
  DATA_ITER_ALB_F3,

  DATA_ITER_USR_N_PARAM,
  DATA_ITER_USR_PTR_PARAM,
  DATA_ITER_USR_PTR_DATA,
  DATA_ITER_USR_PTR_PROFILE,

/* Dummy variable (used by GetText(), etc.) */

  DATA_DUMMY,

/* Geometry plotter */

  DATA_STOP_AFTER_PLOT,
  DATA_PLOTTER_MODE,
  DATA_QUICK_PLOT_MODE,
  DATA_IGNORE_GEOM_PLOTS,
  DATA_INTERACTIVE_PLOT_MODE,
  DATA_PLOTTER_NIFC,
  DATA_PLOTTER_NCOL,
  DATA_PLOTTER_NC0,

/* Monte Carlo volume calculation */

  DATA_VOLUME_MC,
  DATA_VOLUME_MC_NMAX,
  DATA_VOLUME_MC_TMAX,
  DATA_VOLUME_MC_EMAX,

/* URES variables */

  DATA_URES_AVAIL,
  DATA_USE_URES,
  DATA_URES_PTR_USE_LIST,
  DATA_URES_USED,
  DATA_URES_EMIN,
  DATA_URES_EMAX,

/* DBRC and TMS (majorant generation) */

  DATA_QPARAM_DBRC,
  DATA_QPARAM_TMS,
  DATA_USE_DBRC,
  DATA_PTR_DBRC,
  DATA_DBRC_EMIN,
  DATA_DBRC_EMAX,
  DATA_PTR_DBRC_COUNT,
  DATA_PTR_DBRC_EXCEED_COUNT,

/* Normalization */

  DATA_PTR_NORM,
  DATA_NORM_U235_FISSE,
  DATA_NORM_INCLUDE_DH,
  DATA_NORM_BURN,
  DATA_NORM_PTR_FISSH,
  DATA_INI_FMASS,
  DATA_INI_BURN_FMASS,
  DATA_TOT_FMASS,
  DATA_TOT_BURN_FMASS,
  DATA_FIMA_ACT0,
  DATA_FIMA_ACT,
  
/* Isomeric branching ratio data */

  DATA_PTR_BRA_LIST,

/* Majorants */

  DATA_PTR_MAJORANT,
  DATA_PTR_PHOTON_MAJORANT,
  DATA_MAJORANT_PTR_EXTRA_XS,

/* Poison xs data */

  DATA_POISON_XS_VOL,
  DATA_POISON_XS_VF,
  
  DATA_POISON_XS_I135_ADENS,
  DATA_POISON_XS_XE135_ADENS,
  DATA_POISON_XS_XE135M_ADENS,
  DATA_POISON_XS_PM147_ADENS,
  DATA_POISON_XS_PM148_ADENS,
  DATA_POISON_XS_PM148M_ADENS,
  DATA_POISON_XS_PM149_ADENS,
  DATA_POISON_XS_SM149_ADENS,

  DATA_POISON_XS_I135_BTCH_ADENS,
  DATA_POISON_XS_XE135_BTCH_ADENS,
  DATA_POISON_XS_XE135M_BTCH_ADENS,
  DATA_POISON_XS_PM147_BTCH_ADENS,
  DATA_POISON_XS_PM148_BTCH_ADENS,
  DATA_POISON_XS_PM148M_BTCH_ADENS,
  DATA_POISON_XS_PM149_BTCH_ADENS,
  DATA_POISON_XS_SM149_BTCH_ADENS,

/* Optimization and memory/data options */

  DATA_OPTI_MODE,
  DATA_OPTI_UNIONIZE_GRID,
  DATA_OPTI_RECONSTRUCT_MICROXS,
  DATA_OPTI_RECONSTRUCT_MACROXS,
  DATA_OPTI_INCLUDE_SPECIALS,
  DATA_OPTI_MODE0_INCLUDE_TOTAL,
  DATA_OPTI_IMPLICIT_RR0,
  DATA_OPTI_IMPLICIT_RR,
  DATA_OPTI_GC_CALC,
  DATA_OPTI_MG_MODE,
  DATA_OPTI_SHARED_BUF,
  DATA_OPTI_SHARED_RES2,
  DATA_OPTI_OMP_REPRODUCIBILITY,
  DATA_OPTI_REPLAY,
  DATA_OPTI_ENTROPY_CALC,
  DATA_OPTI_PRINT_HIS,
  DATA_OPTI_MPI_REPRODUCIBILITY,
  DATA_OPTI_POISON_CALC,
  DATA_OPTI_POISON_CALC_XE135M,
  DATA_OPTI_MPI_BATCH_SIZE,
  DATA_OPTI_DIX,
  DATA_OPTI_EDDINGTON_CALC,

  DATA_SOURCE_PT_ANIM,
  DATA_SOURCE_PT_ANIM_F,
  DATA_SOURCE_PT_ANIM_PALETTE,

  DATA_SRC_FILE_BUF_SIZE,

/* Tracking options */

  DATA_OPT_USE_DT,
  DATA_DT_NTHRESH,
  DATA_DT_PTHRESH,
  DATA_DT_PTR_BLOCK_LIST,
  DATA_DT_PTR_FORCE_LIST,
  DATA_DT_ENFORCE_NEXT_TRACK,
  DATA_ST_USE_STL_MODE,
  DATA_CELL_SEARCH_LIST,
  DATA_MAX_CELL_SEARCH_LIST,
  DATA_PRESORT_NP,
  DATA_PRESORT_NB,
  DATA_GLOBAL_DF,

/* Implicit Monte Carlo (TODO: ota toi OPT pois nimest√§) */

  DATA_OPT_IMPL_CAPT,
  DATA_OPT_IMPL_FISS,
  DATA_OPT_IMPL_FISS_NUBAR,
  DATA_OPT_IMPL_NXN,
  DATA_OPT_ROULETTE_W0,
  DATA_OPT_ROULETTE_P0,
  DATA_USE_WEIGHT_WINDOWS,
  DATA_WWD_LOWER_BOUND,
  DATA_WWD_UPPER_BOUND,
  DATA_WWD_SURVIVAL_F,
  DATA_WWD_MAX_SPLIT,
  DATA_WWD_MIN_ROULETTE,

  DATA_RMTX_CALC,
  DATA_RMTX_MFP_CALC,
  DATA_RMTX_SOLVE_FORWARD,
  DATA_RMTX_SOLVE_ADJOINT,
  DATA_RUN_VR_ITER,
  DATA_VR_ITER_IDX,
  DATA_VR_PROBE_IDX,
  DATA_TOT_VR_ITER,
  DATA_USE_GEOM_IMP,

/* Cross section plotter */

  DATA_XSPLOT_NE,
  DATA_XSPLOT_EMIN,
  DATA_XSPLOT_EMAX,

/* Run parameters */

  DATA_STOP_AFTER_PROCESSING,
  DATA_MATPOS_N_PTS,
  DATA_MATPOS_PTR_COORD,
  DATA_MATPOS_PTR_FILE,
  DATA_MAX_TRANSPORT_RUNTIME,
  DATA_NEUTRON_MAX_TRACK_LOOP_ERR,
  DATA_PHOTON_MAX_TRACK_LOOP_ERR,
  DATA_NEUTRON_MAX_TRACK_LOOP,
  DATA_PHOTON_MAX_TRACK_LOOP,
  DATA_PRINT_INTERVAL,
  DATA_CRIT_POP,
  DATA_CRIT_CYCLES,
  DATA_CRIT_SKIP,
  DATA_GROW_POP_SIM,
  DATA_GROW_POP_C,
  DATA_GROW_POP_M,
  DATA_GROW_POP_PREV,
  DATA_GROW_POP_MAX_HIS,
  DATA_GROW_POP_MAX_POP,
  DATA_GROW_POP_NHIST,
  DATA_SRC_POP,
  DATA_DYN_SRC_PREV_POP,
  DATA_SRC_BATCHES,
  DATA_SIMUL_BATCH_SIZE,
  DATA_SIMULATION_MODE,
  DATA_CYCLE_IDX,
  DATA_SIMULATION_COMPLETED,
  DATA_BATCH_INTERVAL,
  DATA_BATCH_COUNT,
  DATA_DYN_PTR_TIME_BINS,
  DATA_DYN_POP_MIN,
  DATA_DYN_POP_MAX,
  DATA_DYN_TMIN,
  DATA_DYN_TMAX,
  DATA_DYN_NB,
  DATA_DYN_TB,
  DATA_DYN_WGT0,
  DATA_DYN_DT,
  DATA_DYN_WMIN,

  DATA_TERMINATE_ON_DIE,
  DATA_EXT_SRC_NUBAR_F,

  DATA_OMP_MAX_THREADS,
  DATA_PTR_OMP_COMPLETED,
  DATA_PTR_OMP_HISTORY_COUNT,
  DATA_CONFIDENTIAL,
  DATA_COMMON_QUE_LIM,

/* History index for debugging */

  DATA_PTR_PRIVA_HIS_IDX,

/* Elemental decomposition */

  DATA_ELEM_DECOMP,
  DATA_ELEM_DECOMP_PTR_LIST,

/* Running modes */

  DATA_NEUTRON_TRANSPORT_MODE,
  DATA_PHOTON_TRANSPORT_MODE,
  DATA_BURNUP_CALCULATION_MODE,
  DATA_VOLUME_CALCULATION_MODE,
  DATA_PARTICLE_DISPERSER_MODE,
  DATA_PARTICLE_REDEPLETE_MODE,
  DATA_USE_DECAY_SRC,
  DATA_PHOTON_PRODUCTION,
  DATA_PHOTON_IMPL_WMIN,
  DATA_PHOTON_IMPL_NMAX,
  DATA_DECOMPOSE_MIXTURES,
  DATA_MULTI_PARTICLE_TRANSPORT,

/* Storage space for neutrons and gammas */

  DATA_PART_PTR_NSTACK,
  DATA_PART_PTR_GSTACK,
  DATA_PART_PTR_QUE,
  DATA_PART_PTR_SOURCE,
  DATA_PART_PTR_LIMBO,
  DATA_PART_PTR_POOL,
  DATA_PART_PTR_COMMON_QUE,
  DATA_PART_PTR_BANK,
  DATA_PART_PTR_TRK_BANK,
  DATA_PART_ALLOC_N,
  DATA_PART_ALLOC_G,
  DATA_PART_NBUF_FACTOR,
  DATA_PART_GBUF_FACTOR,
  DATA_PART_PTR_MIN_NSTACK,
  DATA_PART_PTR_MIN_GSTACK,

/* Recorded events */

  DATA_EVENT_RECORD_FLAGS,
  DATA_PTR_EVENT_BANK,
  DATA_EVENT_BANK_SZ,
  DATA_EVENT_MAX_GEN,

  DATA_PTR_EBLOCK_BANK,
  DATA_EBLOCK_BANK_SZ,

/* Run-time variables */

  DATA_CYCLE_PROMPT_WGT,
  DATA_CYCLE_DELAYED_WGT,
  DATA_CYCLE_KEFF,
  DATA_PTR_CYCLE_EIG_KEFF,
  DATA_NHIST_TOT,
  DATA_NHIST_BATCH0,
  DATA_N_POP_EIG,

  DATA_WIELANDT_MODE,
  DATA_WIELANDT_KEFF,
  DATA_WIELANDT_P,
  DATA_WIELANDT_KP,

/* Response-matrix based convergence acceleration */

  DATA_RMX_CONVG_ACC,
  DATA_RMX_CONVG_ITER_IDX,
  DATA_RMX_CONVG_SB,
  DATA_RMX_CONVG_OUT_N,
  DATA_RMX_CONVG_OUT_TOL,

/* Multi-response stuff for RMX solver */

  DATA_RMX_MULT_CONVG_LIM,
  DATA_RMX_MULT_CONVG_PASS,
  DATA_RMX_MULT_MAX_ITER,
  DATA_RMX_ADA_PTR_CELL_DUMP,
  DATA_RMX_TEST_MODE,
  DATA_BTCH_TIME,
  DATA_RMX_CONV0,
  DATA_RMX_N_ITER0,

/* Stuff for adaptive RMX solver */

  DATA_MAX_RMX_SPLIT_FLAGS,

/* N√§√§ on ehk√§ sama asia ? */

  DATA_NHIST_CYCLE,
  DATA_CYCLE_BATCH_SIZE,

/* Estimated running times */

  DATA_PREV_CYCLE_T0,
  DATA_PREV_CYCLE_T1,
  DATA_ESTIM_CYCLE_TIME,
  DATA_ESTIM_TOT_TIME,

/* Radioactivity data */

  DATA_TOT_ING_TOX,
  DATA_TOT_INH_TOX,
  DATA_TOT_ACTIVITY,
  DATA_TOT_SFRATE,
  DATA_TOT_DECAY_HEAT,
  DATA_BURN_SFRATE,
  DATA_BURN_DECAY_HEAT,
  DATA_ACT_ACTIVITY,
  DATA_ACT_DECAY_HEAT,
  DATA_ACT_ING_TOX,
  DATA_ACT_INH_TOX,
  DATA_FP_ACTIVITY,
  DATA_FP_DECAY_HEAT,
  DATA_FP_ING_TOX,
  DATA_FP_INH_TOX,
  DATA_SR90_ACTIVITY,
  DATA_TE132_ACTIVITY,
  DATA_I131_ACTIVITY,
  DATA_I132_ACTIVITY,
  DATA_CS134_ACTIVITY,
  DATA_CS137_ACTIVITY,
  DATA_TOT_PHOTON_DEC_SRC_RATE,
  DATA_PHOTON_DEC_SRC_MAX_I,
  DATA_PHOTON_DEC_SRC_VOL,
  DATA_TOT_NEUTRON_DEC_SRC_RATE,
  DATA_NEUTRON_DEC_SRC_MAX_I,
  DATA_NEUTRON_DEC_SRC_VOL,

  DATA_TOT_BETA_DEC_SRC_RATE,
  DATA_TOT_ALPHA_DEC_SRC_RATE,
  DATA_NORM_DECAY_SRC_RATE,

  DATA_GSPEC_PTR_EGRID,

/* Group constant generation */

  DATA_ERG_FG_NG,
  DATA_ERG_FG_PTR_GRID,
  DATA_ERG_FG_PTR_PREDEF,
  DATA_GCU_PTR_UNI,
  DATA_HOMOFLUX_SOLVER,
  DATA_HOMOFLUX_DIFFCOEF,
  DATA_ADF_TRAPZ_PT,

/* Core power distribution */

  DATA_CORE_PDE_DEPTH,
  DATA_CORE_PDE_NZ,
  DATA_CORE_PDE_ZMIN,
  DATA_CORE_PDE_ZMAX,
  DATA_CORE_PDE_PTR_CORE,
  DATA_CORE_PDE_PTR_ASS,
  DATA_CORE_PDE_PTR_RES0,
  DATA_CORE_PDE_PTR_RES1,
  DATA_CORE_PDE_PTR_RES2,
  DATA_CORE_PDE_N0,
  DATA_CORE_PDE_N1,
  DATA_CORE_PDE_N2,
  DATA_CORE_PDE_L1,
  DATA_CORE_PDE_L2,

/* Uniform fission source */

  DATA_UFS_MODE,
  DATA_UFS_PTR_FACTORS,
  DATA_UFS_PTR_SRC_MESH,
  DATA_UFS_ORDER,
  DATA_UFS_MIN,
  DATA_UFS_MAX,
  DATA_UFS_PTR_LAT,
  DATA_UFS_NX,
  DATA_UFS_XMIN,
  DATA_UFS_XMAX,
  DATA_UFS_NY,
  DATA_UFS_YMIN,
  DATA_UFS_YMAX,
  DATA_UFS_NZ,
  DATA_UFS_ZMIN,
  DATA_UFS_ZMAX,

/* Fission source entropy */

  DATA_ENTROPY_NX,
  DATA_ENTROPY_NY,
  DATA_ENTROPY_NZ,
  DATA_ENTROPY_XMIN,
  DATA_ENTROPY_XMAX,
  DATA_ENTROPY_YMIN,
  DATA_ENTROPY_YMAX,
  DATA_ENTROPY_ZMIN,
  DATA_ENTROPY_ZMAX,
  DATA_ENTROPY_PTR_SPT_STAT,
  DATA_ENTROPY_PTR_SWG_STAT,

/* Burnup calculation stuff */

  DATA_BURN_CALC_INI_MASS,
  DATA_BURN_DECAY_CALC,
  DATA_BURN_STEP_PC,
  DATA_BURN_BUMODE,
  DATA_BURN_CRAM_K,
  DATA_BURN_STEP,
  DATA_BURN_TIME_INTERVAL,
  DATA_BURN_BURNUP_INTERVAL,
  DATA_BURN_PTR_DEP,
  DATA_BURN_PTR_CURRENT_DEP,
  DATA_BURN_PTR_CURRENT_STEP,
  DATA_BURN_CUM_BURNTIME0,
  DATA_BURN_CUM_BURNTIME,
  DATA_BURN_CUM_BURNUP,
  DATA_BURN_CUM_REAL_BURNUP,
  DATA_BURN_PTR_INVENTORY,
  DATA_BURN_INVENTORY_NUCLIDES,
  DATA_BURN_PRINT_DEPMTX,
  DATA_BURN_ENECUT,
  DATA_BURN_TOT_STEPS,
  DATA_BURN_PRED_STEP,
  DATA_BURN_CORR_STEP,
  DATA_BURN_PRINT_COMP,
  DATA_BURN_PRINT_COMP_LIM,
  DATA_BURN_STEP_TYPE,
  DATA_BURN_MAT_OUTPUT,
  DATA_BURN_MATERIALS_FLAG,
  DATA_BURN_PREV_KEFF,
  DATA_BURN_PREV_DKEFF,
  DATA_BURN_ACTI_PTR_DEP,
  DATA_BURN_ACTI_PREV_F,
  DATA_BURN_PRINT_STEP,
  DATA_BURN_PRINT_OUTPUT,

/* Domain decomposition */

  DATA_DD_DECOMPOSE,
  DATA_DD_MODE,
  DATA_DD_BUFF_NUM_PARTS,
  DATA_DD_ORIG_X0,
  DATA_DD_ORIG_Y0,
  DATA_DD_ORIG_Z0,
  DATA_DD_SECT0,

/* Counters needed for burnup calculation */

  DATA_TOT_NUCLIDES,
  DATA_PRED_TRANSPORT_TIME,
  DATA_CORR_TRANSPORT_TIME,
  DATA_COEF_TRANSPORT_TIME,

/* Parameters for top inventory calculation */

  DATA_BURN_INV_TOP_MASS,
  DATA_BURN_INV_TOP_ACTIVITY,
  DATA_BURN_INV_TOP_SF,
  DATA_BURN_INV_TOP_GSRC,
  DATA_BURN_INV_TOP_DECAY_HEAT,
  DATA_BURN_INV_TOP_ING_TOX,
  DATA_BURN_INV_TOP_INH_TOX,

/* Critical spectrum calculation */

  DATA_B1_CALC,
  DATA_B1_B2_INIT,
  DATA_B1_MAX_ITER,
  DATA_B1_KEFF_TGT,
  DATA_B1_FM_DIFF,
  DATA_B1_MODE,
  DATA_B1_BURNUP_CORR,
  DATA_B1_ERR_LIMIT,
  DATA_B1_REPEATED,
  DATA_B1_CONVERGED,

/* CMM */

  DATA_CMM_CALC,

/* Micro-group structure */

  DATA_MICRO_CALC_BATCH_COUNT,
  DATA_MICRO_CALC_BATCH_SIZE,
  DATA_MICRO_CALC_BATCH_NUM,
  DATA_MICRO_CALC_NORM,
  DATA_MICRO_PTR_EGRID,
  DATA_MICRO_PTR_IDX_MAP,

/* lengths of the previous step and preceding predictor (AIs) */

  DATA_BURN_PS1_LENGTH,
  DATA_BURN_PRED_LENGTH,

/* Old total powers, used in SetDepStepSize only. (AIs) */

  DATA_BURN_POW_PS1,
  DATA_BURN_POW_BOS,
  DATA_BURN_POW_EOS,

/* weights in the coefficients of 2. order poly fit for burnup calculation */
/* see depletionpolyfit.c for more (AIs)*/

  DATA_BURN_FIT_C2W1,
  DATA_BURN_FIT_C2W2,
  DATA_BURN_FIT_C2W3,
  DATA_BURN_FIT_C1W1,
  DATA_BURN_FIT_C1W2,
  DATA_BURN_FIT_C1W3,
  DATA_BURN_FIT_C0W1,
  DATA_BURN_FIT_C0W2,
  DATA_BURN_FIT_C0W3,
  DATA_BURN_FIT_TYPE,

  DATA_BURN_PRED_TYPE,
  DATA_BURN_PRED_NSS,
  DATA_BURN_CORR_TYPE,
  DATA_BURN_CORR_NSS,

/* Restart file */

  DATA_WRITE_RESTART_FILE,
  DATA_RESTART_WRITE_PTR_FNAME,
  DATA_READ_RESTART_FILE,
  DATA_RESTART_READ_PTR_FNAME,
  DATA_RESTART_READ_POINT,
  DATA_RESTART_READ_IDX,
  DATA_RESTART_READ_ZERO_XE,
  DATA_RESTART_READ_ZERO_SM,
  DATA_RESTART_READ_CONTINUE,
  DATA_RESTART_START_POINT,

/* Coefficient calculation */

  DATA_COEF_CALC_IDX,
  DATA_TOT_COEF_CALC,
  DATA_COEF_CALC_BU_IDX,
  DATA_TOT_COEF_BU,
  DATA_COEF_CALC_TOT_RUNS,
  DATA_COEF_CALC_RUN_IDX,
  DATA_COEF_CALC_PTR_PARAM_LIST,
  DATA_COEF_CALC_SPECIAL_MODE,
  DATA_COEF_CALC_INCLUDE_ERRORS,
  DATA_CASEMTX_RUN,
  DATA_CASEMTX_RUN_PTR_NAME,
  DATA_CASEMTX_RUN_HIS_IDX,
  DATA_CASEMTX_RUN_COE_IDX,
  DATA_HISV_BREAK_POINT,

/* Energy grid for coarse multi-group cross sections */

  DATA_COARSE_MG_NE,
  DATA_COARSE_MG_PTR_GRID,

/* Energy-dependent fission yields */

  DATA_FISSY_ENE_DEP,

/* Delayed nubar option */

  DATA_USE_DELNU,

/* Doppler-broadening mode and temperature feedback */

  DATA_USE_DOPPLER_PREPROCESSOR,
  DATA_TMS_MODE,
  DATA_USE_DENSITY_FACTOR,

/* Tracking collison counter */

  DATA_PTR_COLLISION_COUNT,

/* Stores the inital time of the particle tracked by OMP thread */
/* (in the beginning of tracking-loop) */

  DATA_PTR_PARTICLE_INITIAL_TIME,

/* Buffer and RES2 reduced flag */

  DATA_BUF_REDUCED,
  DATA_RES2_REDUCED,

/* Perform statistical tests on group constants */

  DATA_GC_STAT_TESTS,
  DATA_RUN_STAT_TESTS,

/* Include scattering production in removal xs */

  DATA_GC_REMXS_MULT,

/* Calculation of analog reaction rates */

  DATA_ANA_RR_NCALC,
  DATA_ANA_RR_PCALC,

/* Heat, gamma and light particle production cross sections */

  DATA_INCLUDE_HEAT_PROD_XS,
  DATA_INCLUDE_PHOT_PROD_XS,
  DATA_INCLUDE_PROT_PROD_XS,
  DATA_INCLUDE_DEUT_PROD_XS,
  DATA_INCLUDE_TRIT_PROD_XS,
  DATA_INCLUDE_HE3_PROD_XS,
  DATA_INCLUDE_HE4_PROD_XS,

/* Source points for track plotter */

  DATA_TRACK_PLOTTER_HIS,
  DATA_TRACK_PLOTTER_FILE,	

/* Track plotter time interval options */

  DATA_TRACK_PLOT_HIS_LENGTH,
  DATA_TRACK_PLOT_FRAMES,
  DATA_TRACK_PLOT_TMIN,
  DATA_TRACK_PLOT_TMAX,
  DATA_TRACK_PLOT_NHIS,
  DATA_TRACK_PLOT_ANIM,

/* Pointers to pre-allocated work arrays */

  DATA_PTR_WORK_GRID1,
  DATA_PTR_WORK_GRID2,
  DATA_PTR_WORK_GRID3,

  DATA_PTR_WORK_PRIVA_GRID1,
  DATA_PTR_WORK_PRIVA_GRID2,
  DATA_PTR_WORK_PRIVA_GRID3,

/* Reaction sampling */

  DATA_NPHYS_SAMPLE_FISS,
  DATA_NPHYS_SAMPLE_CAPT,
  DATA_NPHYS_SAMPLE_SCATT,

/* Particle speeds (used with track plot animation) */

  DATA_NEUTRON_SPD,
  DATA_PHOTON_SPD,

/* Memory operations */

  DATA_ALLOW_MEM_OP,
  DATA_PRIVA_MEM_READY,

/* Other stuff */

  DATA_PRINT_PREV_COMPLETE,
  DATA_PTR_CRIT_SRC_DET,
  DATA_PTR_NGAMMA_SRC_DET,
  DATA_NGAMMA_SRC_SIM,
  DATA_PTR_RIA_SRC,
  DATA_ALPHA_EIG,
  DATA_NORM_COEF_N,
  DATA_NORM_COEF_G,
  DATA_SORT_COUNT,
  DATA_NORM_PTR_RAD_SRC_MAT,
  DATA_MAX_DET_FLAGS,

/* Minimum xs for CFE */

  DATA_CFE_N_MIN_L,
  DATA_CFE_N_MIN_T,
  DATA_CFE_G_MIN_L,
  DATA_CFE_G_MIN_T,

/* Cache-optimized xs block */

  DATA_PTR_CACHE_OPTI_XS,
  DATA_CACHE_OPTI_EMAX,
  DATA_CACHE_OPTI_NE,
  DATA_CACHE_OPTI_NREA,

/* Fission matrix */

  DATA_PTR_FMTX,
  DATA_FMTX_TYPE,

/* Corrector iteration */

  DATA_BURN_SIE,
  DATA_BURN_CI_TYPE,
  DATA_BURN_CI_MAXI,
  DATA_BURN_CI_I,
  DATA_BURN_CI_LAST,

  DATA_BURN_CI_NBATCH,
  DATA_BURN_CI_CYCLES,
  DATA_BURN_CI_SKIP,
  DATA_BURN_CI_SKIP_2,
  DATA_BURN_STEP_TOT,
  DATA_BURN_CI_FLAG,

  DATA_BURN_CI_ORIG_NBATCH,
  DATA_BURN_CI_ORIG_CYCLES,
  DATA_BURN_CI_ORIG_SKIP,
  DATA_BURN_CI_ORIG_FSP_SKIP,

/* Number of progenies for beta-eff and prompt lifetime calculation */

  DATA_IFP_OPT_PRINT_ALL,
  DATA_IFP_CHAIN_LENGTH,
  DATA_PERT_VAR_A,
  DATA_PERT_VAR_C,
  DATA_PERT_N_BATCH,

/* Group constant generation at multiple levels */

  DATA_MULTI_LEVEL_GCU,

/* Interface current method */

  DATA_ICM_CALC,
  DATA_ICM_PTR_OUTFILE,
  DATA_ICM_NSEG,
  DATA_ICM_NSUB,
  DATA_ICM_NMU0,
  DATA_ICM_NMU1,
  DATA_ICM_NMU2,
  DATA_ICM_PTR_SUB,
  DATA_ICM_PTR_MU0,
  DATA_ICM_PTR_MU1,
  DATA_ICM_PTR_MU2,
  DATA_ICM_NG0,
  DATA_ICM_NG1,
  DATA_ICM_PTR_ENE0,
  DATA_ICM_PTR_ENE1,

/* For external coupling */

  DATA_WAITING,
  DATA_PPID,
  DATA_RUN_CC,

/* Counters for line number calculation */

  DATA_LINE_NUM_N0,
  DATA_LINE_NUM_NL0,
  DATA_COPY_INPUTS,

/* Temporary array for storing items in the generation of adaptive meshes */

  DATA_ADA_MESH_BUF,

/* STL geometry stuff */

  DATA_STL_TEMP_ARRAY_SIZE,
  DATA_STL_TEST_N_PTS,
  DATA_STL_TEST_N_DIR,
  DATA_STL_GEOM_TEST_MODE,
  DATA_STL_FACET_EXD,
  DATA_STL_ENFORCE_DT,
  DATA_STL_MESH_FILES,

/* Global solution relaxation stuff */

  DATA_SOL_REL_NTOT,
  DATA_SOL_REL_N1,
  DATA_SOL_REL_NCUR,
  DATA_SOL_REL_CYCLES,
  DATA_SOL_REL_ALPHA,
  DATA_SOL_REL_ITER,
  DATA_SOL_REL_FACT,
  DATA_SOL_REL_MAX_ITER,
  DATA_SOL_REL_MAX_POP,

  DATA_BURN_CI_TOLER,

/* Photon transport data */

  DATA_PHOTON_EKN,
  DATA_PHOTON_USE_DOPPLER,
  DATA_PHOTON_COMP_EANG,
  DATA_PHOTON_USE_TTB,
  DATA_PHOTON_TTBPM,
  DATA_PHOTON_TTBLINE,
  DATA_PHOTON_TTBLINEIDX,
  DATA_PHOTON_CP_FALLBACK_2129,

  DATA_PHOTON_ECUTMAT_MAT,
  DATA_PHOTON_ECUTMAT_E,
  DATA_PHOTON_ECUTDENS_DENS,
  DATA_PHOTON_ECUTDENS_E,
  DATA_PHOTON_MFPCUT,
  DATA_PHOTON_MFPCUTMAT_MAT,
  DATA_PHOTON_MFPCUTMAT_MFP,
  DATA_PHOTON_MFPCUTDENS_DENS,
  DATA_PHOTON_MFPCUTDENS_MFP,

  DATA_PHOTON_DATA_DIR,
  DATA_PHOTON_COH_FNAME,
  DATA_PHOTON_INCOH_FNAME,
  DATA_PHOTON_RELAX_FNAME,
  DATA_PHOTON_PEXS_FNAME,
  DATA_PHOTON_PESS_FNAME,
  DATA_PHOTON_PETOT_FNAME,
  DATA_PHOTON_CP_FNAME,

/* Electron data */

  DATA_ELECTRON_MEE,
  DATA_ELECTRON_MEE_MAT,
  DATA_ELECTRON_COND,
  DATA_ELECTRON_COND_MAT,
  DATA_ELECTRON_GAS,
  DATA_ELECTRON_GAS_MAT,
  DATA_ELECTRON_SP_N,
  DATA_ELECTRON_SP_E,
  DATA_ELECTRON_SP_LE,
  DATA_ELECTRON_PRINT_SP,
  DATA_ELECTRON_SP_RAD_CALC,

  DATA_ELECTRON_SP_FNAME,
  DATA_ELECTRON_BR_FNAME,
  DATA_ELECTRON_GSCONFIG_FNAME,

/* Flag for iteration */

  DATA_ITERATE,

/* Fission source passing between iterations / depsteps */

  DATA_USE_FSP,

/* Number of inactive cycles to use with FSP */

  DATA_FSP_CRIT_SKIP,

/* Number of additional materials in openFOAM interface */

  DATA_OF_N_EXTRAMAT,

/* Communications filenames (inwards and outwards) */

  DATA_PTR_COM_IN,
  DATA_PTR_COM_OUT,

/* Parent process port for communication */

  DATA_PPORT,
  DATA_COM_SOCKET,

/* Signalling mode in coupled calculation */
/* none/POSIX/file */

  DATA_CC_SIG_MODE,

/* Particle counts for different batches in dynamic mode */

  DATA_PTR_DYN_PARTCOUNT,
  DATA_PART_PTR_BOI_STORE,
  DATA_PART_PTR_EOI_STORE,

/* Fraction of total memory to use at max */

  DATA_CPU_MEM_FRAC,

/* FINIX input file name lists */

  DATA_PTR_FINROD_FNAME,
  DATA_PTR_FINOPTI_FNAME,
  DATA_PTR_FINSCEN_FNAME,
  DATA_PTR_FININIT_FNAME,

/* Pointers for precursor tracking and delayed neutrons */

  DATA_PART_PTR_PSTACK,
  DATA_PART_PTR_PSOURCE,
  DATA_PART_ALLOC_P,
  DATA_PART_PTR_MIN_PSTACK,
  DATA_PART_PBUF_FACTOR,

  DATA_PTR_PREC_DET,
  DATA_PRECURSOR_TRANSPORT_MODE,

  DATA_PREC_SRC_FACT,
  DATA_PREC_STORE_TRESH,

  DATA_TRANS_NORM_FACT,

/* Transformation time-dependent movement type */

  DATA_TDEP_TRANS_TYPE,
  
/* Store file name flags for coupled transients */

  DATA_BOI_STORE_NAME,
  DATA_EOI_STORE_NAME,

  DATA_NEUTRON_STORE_POS,
  DATA_PRECURSOR_MESH_STORE_POS,
  DATA_PRECURSOR_STORE_POS,

/* Exponential decay heat fit */

  DATA_EXPO_DEC_FIT_NF,
  DATA_EXPO_DEC_FIT_NT,
  DATA_EXPO_DEC_FIT_TMIN,
  DATA_EXPO_DEC_FIT_TMAX,

/* Maximum source region importance calculation */

  DATA_SRC_IMP_CALC,
  DATA_SRC_IMP_NPS,

/* Energy-dependent importances */

  DATA_ENE_IMP_CALC,
  DATA_ENE_IMP_POW,

/* Equilibrium calculation for a list of nuclides */

  DATA_PTR_ITER_NUC0,

/******** Sensitivity/perturbation calculations ***/

  DATA_CYCLE_PEFF,
  DATA_SENS_MODE,
  DATA_SENS_SCORE_TYPE,
  DATA_SENS_LAST_GEN,

  /* Energy deposition */

  DATA_EDEP_MODE,
  DATA_EDEP_CAPT_E,                   
  DATA_EDEP_DELAYED,
  DATA_EDEP_COMP,
  DATA_EDEP_KEFF_CORR,
  DATA_EDEP_LOCAL_EGD,

/* Last global statistical variable */

  DATA_LAST_GLOBAL_STAT,

/* Last value in data block */

  DATA_LAST_VALUE

};

/*****************************************************************************/

/***** Statistical variables *************************************************/

enum block_RES {
  RES_TOT_NEUTRON_LEAKRATE = DATA_LAST_VALUE + 1,
  RES_TOT_NEUTRON_LOSSRATE,
  RES_TOT_NEUTRON_SRCRATE,
  RES_TOT_NEUTRON_CUTRATE,
  RES_TOT_NEUTRON_RR,
  RES_TOT_NEUTRON_FLUX,
  RES_TOT_NEUTRON_POWER,
  RES_TOT_PHOTON_LEAKRATE,
  RES_TOT_PHOTON_LOSSRATE,
  RES_TOT_PHOTON_SRCRATE,
  RES_TOT_PHOTON_CUTRATE,
  RES_TOT_PHOTON_RR,
  RES_TOT_PHOTON_FLUX,
  RES_TOT_PHOTON_HEATRATE,
  RES_TOT_FISSRATE,
  RES_TOT_PHOTON_PRODRATE,
  RES_TOT_NSF,
  RES_TOT_NUBAR,
  RES_TOT_FISSE,
  RES_TOT_CAPTRATE,
  RES_TOT_INLPRODRATE,
  RES_TOT_ELARATE,
  RES_TOT_ABSRATE,
  RES_TOT_POWDENS,
  RES_IMP_KEFF,
  RES_IMP_KINF,
  RES_ANA_KEFF,
  RES_COL_KEFF,
  RES_MEAN_POP_SIZE,
  RES_MEAN_POP_WGT,
  RES_SRC_MULT,
  RES_TOT_GENRATE,
  RES_TOT_RECIPVEL,
  RES_WIELANDT_K,
  RES_WIELANDT_P,
  RES_ANA_FISS_FRAC,
  RES_ANA_CAPT_FRAC,
  RES_ANA_CONV_RATIO,
  RES_CYCLE_RUNTIME,
  RES_CPU_USAGE,
  RES_INI_SRC_WGT,
  RES_NEW_SRC_WGT,
  RES_SRC_WW_SPLIT,
  RES_SRC_WW_EFF,
  RES_WW_BALA_ROULETTE,
  RES_WW_BALA_SPLIT,
  RES_DD_BALA_IN,
  RES_DD_BALA_OUT,
  RES_EXT_K,
  RES_NORM_COEF,
  RES_ITER_VAL,
  RES_ALB_NEUTRON_LEAKRATE,
  RES_GEOM_ALBEDO,

/* Forward-weighted time constants */

  RES_FWD_ANA_BETA_ZERO,
  RES_FWD_ANA_LAMBDA,

/* Adjoint-weighted time constants */

  RES_ADJ_MEULEKAMP_BETA_EFF,
  RES_ADJ_MEULEKAMP_LAMBDA,
  RES_ADJ_NAUCHI_GEN_TIME,
  RES_ADJ_NAUCHI_LIFETIME,
  RES_ADJ_NAUCHI_BETA_EFF,
  RES_ADJ_NAUCHI_LAMBDA,
  RES_ADJ_IFP_GEN_TIME,
  RES_ADJ_IFP_LIFETIME,
  RES_ADJ_IFP_IMP_BETA_EFF,
  RES_ADJ_IFP_IMP_LAMBDA,
  RES_ADJ_IFP_ANA_BETA_EFF,
  RES_ADJ_IFP_ANA_LAMBDA,
  RES_ADJ_IFP_ROSSI_ALPHA,
  RES_ADJ_PERT_GEN_TIME,
  RES_ADJ_PERT_LIFETIME,
  RES_ADJ_PERT_BETA_EFF,
  RES_ADJ_PERT_ROSSI_ALPHA,

/* Misc. analog time constants */

  RES_ANA_MEAN_NCOL,
  RES_ANA_PHOTON_LIFETIME,
  RES_ANA_DELAYED_EMTIME,
  RES_ANA_SLOW_TIME,
  RES_ANA_THERM_TIME,
  RES_ANA_THERM_FRAC,

  RES_ST_TRACK_FRAC,
  RES_DT_TRACK_FRAC,
  RES_DT_TRACK_EFF,
  RES_IFC_COL_EFF,
  RES_TOT_COL_EFF,
  RES_REA_SAMPLING_EFF,
  RES_REA_SAMPLING_FAIL,
  RES_AVG_TRACKS,
  RES_AVG_SURF_CROSS,
  RES_AVG_REAL_COL,
  RES_AVG_VIRT_COL,
  RES_SRC_SAMPLING_EFF,
  RES_SRC_MEAN_WGT,
  RES_AVG_TRACK_LOOPS,

  RES_MEAN_NGEN,

  RES_DYN_PERIOD,
  RES_DYN_POP,
  RES_PROMPT_GEN_POP,
  RES_PROMPT_GEN_CUMU,
  RES_PROMPT_GEN_TIMES,
  RES_PROMPT_CHAIN_LENGTH,

/* Myrkyt */

  RES_I135_EQUIL_CONC,
  RES_XE135_EQUIL_CONC,
  RES_XE135_ABSRATE,

  RES_PM149_EQUIL_CONC,
  RES_SM149_EQUIL_CONC,
  RES_SM149_ABSRATE,

  RES_TMS_SAMPLING_EFF,
  RES_TMS_FAIL_STAT,
  RES_MIN_MACROXS,

  RES_STL_RAY_TEST,

  RES_PHOTOELE_CAPT_RATE,
  RES_PAIRPROD_CAPT_RATE,

/* Response matrix solver */

  RES_RMX_CURR_SEARCH_FAIL,

/* Photon production */

  RES_PHOTON_SAMPLING_FAIL,

/* Particle balance */

  RES_N_BALA_SRC,
  RES_N_BALA_LOSS,

  RES_G_BALA_SRC,
  RES_G_BALA_LOSS,

/* Average energies of neutrons that cause fission */

  RES_ANA_ALF,
  RES_IMP_ALF,

  RES_ANA_EALF,
  RES_IMP_EALF,

  RES_ANA_AFGE,
  RES_IMP_AFGE,

/* Reaction rates for iterable nuclides */

  RES_TOT_ITER_NUC_ABSRATE,
  RES_ITER_NUC_FACTOR,

/* Sensitivities */

  RES_ADJ_PERT_KEFF_SENS,
  RES_ADJ_PERT_BEFF_SENS,
  RES_ADJ_PERT_BEFF_G1_SENS,
  RES_ADJ_PERT_BEFF_G2_SENS,
  RES_ADJ_PERT_BEFF_G3_SENS,
  RES_ADJ_PERT_BEFF_G4_SENS,
  RES_ADJ_PERT_BEFF_G5_SENS,
  RES_ADJ_PERT_BEFF_G6_SENS,
  RES_ADJ_PERT_BEFF_G7_SENS,
  RES_ADJ_PERT_BEFF_G8_SENS,
  RES_ADJ_PERT_LAMBDA_SENS,
  RES_ADJ_PERT_LAMBDA_G1_SENS,
  RES_ADJ_PERT_LAMBDA_G2_SENS,
  RES_ADJ_PERT_LAMBDA_G3_SENS,
  RES_ADJ_PERT_LAMBDA_G4_SENS,
  RES_ADJ_PERT_LAMBDA_G5_SENS,
  RES_ADJ_PERT_LAMBDA_G6_SENS,
  RES_ADJ_PERT_LAMBDA_G7_SENS,
  RES_ADJ_PERT_LAMBDA_G8_SENS,
  RES_ADJ_PERT_LEFF_SENS,
  RES_ADJ_PERT_VOID_SENS,
  RES_SENS_AROS,
  RES_SENS_BSPL,
  RES_SENS_BUFF,
  RES_SENS_LEOK,

/* Six-factor formula */

  RES_SIX_FF_ABS,
  RES_SIX_FF_ETA,
  RES_SIX_FF_LT,
  RES_SIX_FF_LF,
  RES_SIX_FF_P,
  RES_SIX_FF_F,
  RES_SIX_FF_EPSILON,
  RES_SIX_FF_KINF,
  RES_SIX_FF_KEFF,

  /* Last value in the block */

  RES_LAST_VALUE
  
};

/* Number of statistical variables, including RES_LAST_VALUE */

#define RES_STAT_VARIABLES          (RES_LAST_VALUE - DATA_LAST_VALUE)

/* Size of fixed data block and minimum acceptable pointer (NOTE: tossa */
/* pit√§√§ nyt olla + 1 koska noi viittaa samaan blokkiin. Sin√§ns√§ turhan */
/* monimutkaisesti tehty. */

#define DATA_FIXED_BLOCK_SIZE       (DATA_LAST_VALUE + RES_STAT_VARIABLES + 1)
#define VALID_PTR                   (DATA_FIXED_BLOCK_SIZE - 1)

/*****************************************************************************/

/***** List data *************************************************************/

/* This is data stored for every item */

#define LIST_DATA_SIZE   4

#define LIST_PTR_NEXT    0
#define LIST_PTR_PREV    1
#define LIST_PTR_COMMON  2
#define LIST_PTR_DIRECT  3

/* Simplified one-way LIFO list (nolla-alkio pit√§√§ olla toi next) */

#define LIFO_LIST_DATA_SIZE   1

#define LIFO_LIST_PTR_NEXT    0

/* This is common data in a separate structure */

#define LIST_COMMON_DATA_SIZE      5

#define LIST_COMMON_ITEM_SIZE      0
#define LIST_COMMON_PTR_ROOT       1
#define LIST_COMMON_N_ITEMS        2
#define LIST_COMMON_PTR_FIRST      3
#define LIST_COMMON_PTR_LAST       4

/* Listable value pair block */

#define VALUE_PAIR_BLOCK_SIZE    (LIST_DATA_SIZE + 2)

#define VALUE_PAIR_VAL1          (LIST_DATA_SIZE + 0)
#define VALUE_PAIR_VAL2          (LIST_DATA_SIZE + 1)

/*****************************************************************************/

/***** Common variables for input parameters *********************************/

/* PARAM_N_COMMON:iin ei lis√§t√§ LIST_DATA_SIZE:a */

#define PARAM_N_COMMON   3

#define PARAM_PTR_NAME   (LIST_DATA_SIZE + 0)
#define PARAM_PTR_FNAME  (LIST_DATA_SIZE + 1)
#define PARAM_LINE       (LIST_DATA_SIZE + 2)

/*****************************************************************************/

/***** Material block ********************************************************/

/* TODO: N√§it√§ nimi√§ pit√§√§ seriously j√§rkev√∂itt√§√§ !!! */

enum block_MATERIAL {
  MATERIAL_OPTIONS = LIST_DATA_SIZE + PARAM_N_COMMON,
  MATERIAL_PTR_NAME,
  MATERIAL_PTR_COMP,
  MATERIAL_PTR_MIX,
  MATERIAL_RGB,
  MATERIAL_VOLUME,
  MATERIAL_VOLUME_GIVEN,
  MATERIAL_MASS,
  MATERIAL_MASS_GIVEN,
  MATERIAL_INI_FISS_MDENS,
  MATERIAL_INI_FMASS,
  MATERIAL_PTR_MC_VOLUME,
  MATERIAL_PTR_MC_DENSITY,
  MATERIAL_BURN_RINGS,
  MATERIAL_COLOUR_IDX,
  MATERIAL_ADENS,
  MATERIAL_MDENS,
  MATERIAL_PTR_TOT_REA_LIST,
  MATERIAL_PTR_ELA_REA_LIST,
  MATERIAL_PTR_ABS_REA_LIST,
  MATERIAL_PTR_FISS_REA_LIST,
  MATERIAL_PTR_HEATT_REA_LIST,
  MATERIAL_PTR_PHOTP_REA_LIST,
  MATERIAL_PTR_PROTP_REA_LIST,
  MATERIAL_PTR_DEUTP_REA_LIST,
  MATERIAL_PTR_TRITP_REA_LIST,
  MATERIAL_PTR_HE3P_REA_LIST,
  MATERIAL_PTR_HE4P_REA_LIST,
  MATERIAL_PTR_INLP_REA_LIST,
  MATERIAL_PTR_PHOT_TOT_LIST,
  MATERIAL_PTR_PHOT_HEAT_LIST,
  MATERIAL_PTR_TOT_URES_LIST,
  MATERIAL_PTR_ABS_URES_LIST,
  MATERIAL_PTR_ELA_URES_LIST,
  MATERIAL_PTR_FISS_URES_LIST,
  MATERIAL_PTR_HEAT_URES_LIST,
  MATERIAL_PTR_TMP_MAJORANT_LIST,
  MATERIAL_PTR_TOTXS,
  MATERIAL_PTR_ELAXS,
  MATERIAL_PTR_ABSXS,
  MATERIAL_PTR_FISSXS,
  MATERIAL_PTR_INLPXS,
  MATERIAL_PTR_FISSE,
  MATERIAL_PTR_NSF,
  MATERIAL_PTR_HEATTXS,
  MATERIAL_PTR_PHOTPXS,
  MATERIAL_PTR_PROTPXS,
  MATERIAL_PTR_DEUTPXS,
  MATERIAL_PTR_TRITPXS,
  MATERIAL_PTR_HE3PXS,
  MATERIAL_PTR_HE4PXS,
  MATERIAL_PTR_TOTPHOTXS,
  MATERIAL_PTR_HEATPHOTXS,
  MATERIAL_PTR_TMP_MAJORANTXS,
  MATERIAL_MEM_SIZE,
  MATERIAL_TOT_DIV_MEM_SIZE,
  MATERIAL_PTR_SAB,
  MATERIAL_PTR_DEP_TRA_LIST,
  MATERIAL_PTR_DEP_FISS_LIST,
  MATERIAL_PTR_DEP_NSF_LIST,
  MATERIAL_ACTIVITY,
  MATERIAL_PHOTON_DEC_SRC_RATE,
  MATERIAL_NEUTRON_DEC_SRC_RATE,
  MATERIAL_SFRATE,
  MATERIAL_DECAY_HEAT,
  MATERIAL_PTR_FLUX_SPEC,
  MATERIAL_PTR_FLUX_SPEC_SUM,
  MATERIAL_PTR_BURN_FLUX,
  MATERIAL_BURN_FLUX_PS1,
  MATERIAL_BURN_FLUX_BOS,
  MATERIAL_BURN_FLUX_EOS,
  MATERIAL_BURN_FLUX_SSA,
  MATERIAL_BURN_POW_PS1,
  MATERIAL_BURN_POW_BOS,
  MATERIAL_BURN_POW_EOS,
  MATERIAL_BURNUP,
  MATERIAL_OMP_ID,
  MATERIAL_MPI_ID,
  MATERIAL_PTR_DATA_BLOCK,
  MATERIAL_DATA_BLOCK_SIZE,
  MATERIAL_PTR_IFC,
  MATERIAL_PTR_DATAIFC_ARR,
  MATERIAL_PROC_IDX,
  MATERIAL_BURN_IDX,
  MATERIAL_PTR_GCU,
  MATERIAL_PTR_DIV,
  MATERIAL_DIV_TYPE,
  MATERIAL_DIV_PTR_PARENT,
  MATERIAL_DIV_N_TOT_ZONES,
  MATERIAL_DIV_N_SUB_ZONES,
  MATERIAL_DIV_N_ZONES,
  MATERIAL_DIV_ZONE_IDX,
  MATERIAL_DIV_PTR_FIRST,
  MATERIAL_BURN_PRINT_OUTPUT,
  MATERIAL_DT_MODE,
  MATERIAL_URES_EMIN,
  MATERIAL_URES_EMAX,
  MATERIAL_VOL_COUNT,
  MATERIAL_BURN_SORT_FLAG,
  MATERIAL_FMTX_IDX,
  MATERIAL_PTR_I135_ISO,
  MATERIAL_PTR_XE135_ISO,
  MATERIAL_PTR_XE135M_ISO,
  MATERIAL_PTR_PM147_ISO,
  MATERIAL_PTR_PM148_ISO,
  MATERIAL_PTR_PM148M_ISO,
  MATERIAL_PTR_PM149_ISO,
  MATERIAL_PTR_SM149_ISO,
  MATERIAL_PTR_I135_PROD_RATE,
  MATERIAL_PTR_XE135_PROD_RATE,
  MATERIAL_PTR_PM149_PROD_RATE,
  MATERIAL_PTR_SM149_PROD_RATE,
  MATERIAL_PTR_I135_ABS_RATE,
  MATERIAL_PTR_XE135_ABS_RATE,
  MATERIAL_PTR_PM149_ABS_RATE,
  MATERIAL_PTR_SM149_ABS_RATE,
  MATERIAL_XENON_EQUIL_CALC,
  MATERIAL_SAMARIUM_EQUIL_CALC,
  MATERIAL_PTR_I135_CONC,
  MATERIAL_PTR_XE135_CONC,
  MATERIAL_PTR_PM149_CONC,
  MATERIAL_PTR_SM149_CONC,
  MATERIAL_DEFAULT_PTR_LIB_ID,
  MATERIAL_DEFAULT_TMP,
  MATERIAL_DOPPLER_TEMP,
  MATERIAL_TMS_MODE,
  MATERIAL_TMS_TMIN,
  MATERIAL_TMS_TMAX,
  MATERIAL_USE_IFC,
  MATERIAL_PTR_NORM,
  MATERIAL_COEF_TEMP,
  MATERIAL_COEF_SAB,
  MATERIAL_BURN_FLUX_REL,
  MATERIAL_BURN_FLUX_AVE,
  MATERIAL_CI_BOS_ABSXS,
  MATERIAL_CI_EOS_ABSXS,
  MATERIAL_CI_AVE_ABSXS,
  MATERIAL_CI_BOS_ABSXS2,
  MATERIAL_CI_EOS_ABSXS2,
  MATERIAL_CI_AVE_ABSXS2,
  MATERIAL_CI_IDE,
  MATERIAL_PTR_DETBIN,
  MATERIAL_PTR_INFLOW,
  MATERIAL_PTR_OUTFLOW,
  MATERIAL_FLOW_IDX,
  MATERIAL_FLOW_N,
  MATERIAL_FLOW_PTR_FIRST,
  MATERIAL_PTR_ORIG_NUC_COMP,
  MATERIAL_PTR_PHOTON_DECAY_SRC,
  MATERIAL_PTR_NEUTRON_DECAY_SRC,
  MATERIAL_PHOTON_ATT_NE,
  MATERIAL_PTR_PHOTON_ATT_E,
  MATERIAL_PTR_PHOTON_ATT_F,
  MATERIAL_SAMPLED_DECAY_SRC,
  MATERIAL_MAX_ADENS,
  MATERIAL_PTR_TTB,
  MATERIAL_PTR_EL,
  MATERIAL_PTR_TRANSP_CORR,
  MATERIAL_PHOTON_ECUT,
  MATERIAL_PHOTON_MFPCUT,
  MATERIAL_PTR_ACT_DET,
  MATERIAL_PTR_ITER_ISO_LIST,
  MATERIAL_RESTART_ADENS_F,
  MATERIAL_PTR_OTF_BURN,
  MATERIAL_SORT_IDX,
  MATERIAL_DD_X0,
  MATERIAL_DD_Y0,
  MATERIAL_DD_Z0,
  MATERIAL_FIMA_ADENS0,
  MATERIAL_FIMA_ADENS,
  MATERIAL_BLOCK_SIZE
};

/*****************************************************************************/

/***** Nuclide composition in material ***************************************/

enum block_COMPOSITION {
  COMPOSITION_PTR_NUCLIDE = LIST_DATA_SIZE,
  COMPOSITION_ADENS,
  COMPOSITION_ADENS_BOS,
  COMPOSITION_ADENS_AVE,
  COMPOSITION_BLOCK_SIZE
};

/*****************************************************************************/

/***** Mixture composition ***************************************************/

enum block_MIXTURE {
  MIXTURE_PTR_MAT = LIST_DATA_SIZE,
  MIXTURE_VFRAC,
  MIXTURE_MFRAC,
  MIXTURE_BLOCK_SIZE
};

/*****************************************************************************/

/***** XS data array *********************************************************/

enum block_NUCLIDE {
  NUCLIDE_PTR_NAME = LIST_DATA_SIZE,
  NUCLIDE_TYPE,
  NUCLIDE_OPTIONS,
  NUCLIDE_TYPE_FLAGS,
  NUCLIDE_ZAI,
  NUCLIDE_ZA,
  NUCLIDE_Z,
  NUCLIDE_A,
  NUCLIDE_I,
  NUCLIDE_AW,
  NUCLIDE_AWR,
  NUCLIDE_PTR_LIB_ID,
  NUCLIDE_PTR_ACE,
  NUCLIDE_PTR_DECAY_ACE,
  NUCLIDE_PTR_PHOTON_ACE,
  NUCLIDE_PTR_REA,
  NUCLIDE_N_TRANSPORT_REA,
  NUCLIDE_N_SPECIAL_REA,
  NUCLIDE_N_DECAY_REA,
  NUCLIDE_N_TRANSPORT_BRANCH,
  NUCLIDE_N_DECAY_BRANCH,
  NUCLIDE_N_TRANSMUTATION_REA,
  NUCLIDE_N_DEAD_PATH,
  NUCLIDE_N_TRANSMUTATION_PATH,
  NUCLIDE_LAMBDA,
  NUCLIDE_DECAY_E,
  NUCLIDE_SF_BR,
  NUCLIDE_SF_NUBAR,
  NUCLIDE_PTR_NFY_DATA,
  NUCLIDE_PTR_SFY_DATA,
  NUCLIDE_NFY_NE,
  NUCLIDE_PATH_LEVEL,
  NUCLIDE_PTR_EGRID,
  NUCLIDE_EGRID_NE,
  NUCLIDE_EMIN,
  NUCLIDE_EMAX,
  NUCLIDE_MAX_TOTXS,
  NUCLIDE_PTR_TOTXS,
  NUCLIDE_PTR_HEATPRODXS,
  NUCLIDE_PTR_PHOTPRODXS,
  NUCLIDE_PTR_SUM_ABSXS,
  NUCLIDE_PTR_ELAXS,
  NUCLIDE_PTR_FISSXS,
  NUCLIDE_PTR_NGAMMAXS,
  NUCLIDE_PTR_PHOTON_INCOHEXS,
  NUCLIDE_PTR_PHOTON_COHEXS,
  NUCLIDE_PTR_PHOTON_PHOTOELXS,
  NUCLIDE_PTR_PHOTON_PAIRPRODXS,
  NUCLIDE_PTR_PHOTON_HEATPRODXS,
  NUCLIDE_PTR_SAMPLE_REA_LIST,
  NUCLIDE_URES_EMIN,
  NUCLIDE_URES_EMAX,
  NUCLIDE_PTR_URES_RND,
  NUCLIDE_PTR_MATRIX_IDX,
  NUCLIDE_MEMSIZE,
  NUCLIDE_IDX,
  NUCLIDE_INVENTORY_IDX,
  NUCLIDE_TMP_IDX,
  NUCLIDE_PTR_TOTFISS_REA,
  NUCLIDE_SPEC_ING_TOX,
  NUCLIDE_SPEC_INH_TOX,
  NUCLIDE_PTR_RADIATIONS,
  NUCLIDE_ACE_PREC_GROUPS,
  NUCLIDE_PREV_COL_Z2,
  NUCLIDE_PREV_COL_COS,
  NUCLIDE_PREV_COL_ER,
  NUCLIDE_PREV_COL_ET,
  NUCLIDE_PREV_COL_DT,
  NUCLIDE_PREV_COL_T,
  NUCLIDE_PREV_COL_TV_Z2,
  NUCLIDE_PREV_COL_TV_COS,
  NUCLIDE_PREV_COL_TV_ET,
  NUCLIDE_PREV_COL_TV_T,
  NUCLIDE_MIN_AFRAC,
  NUCLIDE_MAX_AFRAC,
  NUCLIDE_URES_SAMPLING,
  NUCLIDE_PTR_PHOTON_DATA,
  NUCLIDE_TMP_ADENS,
  NUCLIDE_TOP_MASS,
  NUCLIDE_TOP_ACTIVITY,
  NUCLIDE_TOP_SF,
  NUCLIDE_TOP_GSRC,
  NUCLIDE_TOP_DECAY_HEAT,
  NUCLIDE_TOP_ING_TOX,
  NUCLIDE_TOP_INH_TOX,
  NUCLIDE_TEMP,
  NUCLIDE_XS_TEMP,
  NUCLIDE_MAJORANT_TEMP,
  NUCLIDE_TMS_MIN_TEMP,
  NUCLIDE_TMS_MAX_TEMP,
  NUCLIDE_DBRC_MAX_TEMP,
  NUCLIDE_PTR_SAB_NUC,
  NUCLIDE_PTR_SAB,
  NUCLIDE_SAB_EMAX,
  NUCLIDE_SAB_EMAXLOW,
  NUCLIDE_SAB_PTR_FREE,
  NUCLIDE_PTR_RELAX,
  NUCLIDE_PTR_PHOTON_PROD,
  NUCLIDE_FISSE,
  NUCLIDE_PTR_ORIG_THERM,
  NUCLIDE_PTR_FISSE_DATA,
  NUCLIDE_PTR_NFXS,
  NUCLIDE_BLOCK_SIZE
};

/* Radiations */

enum block_NUCLIDE_RAD {
  NUCLIDE_RAD_TYPE = LIST_DATA_SIZE,
  NUCLIDE_RAD_SPEC_I,
  NUCLIDE_RAD_PTR_SPEC,
  NUCLIDE_RAD_BLOCK_SIZE
};

/*****************************************************************************/

/****** FP identifier ********************************************************/

enum block_FP_IDENT {
  FP_IDENT_PTR_ID = LIST_DATA_SIZE,
  FP_IDENT_TEMP,
  FP_IDENT_TMS,
  FP_IDENT_BLOCK_SIZE
};

/*****************************************************************************/

/****** Iteration nuclide ****************************************************/

enum block_ITER_NUCLIDE {
  ITER_NUCLIDE_ZAI = PARAM_N_COMMON + LIST_DATA_SIZE,
  ITER_NUCLIDE_PTR_MATERIAL_LIST,
  ITER_NUCLIDE_PTR_COMPOSITION_LIST,
  ITER_NUCLIDE_PTR_NUCLIDE,
  ITER_NUCLIDE_MAX_ADENS,
  ITER_NUCLIDE_BLOCK_SIZE
};

/*****************************************************************************/

/***** Decay source spectrum *************************************************/

enum block_DECAY_SPEC {
  DECAY_SPEC_PARTICLE = LIST_DATA_SIZE,
  DECAY_SPEC_TYPE,
  DECAY_SPEC_LINE_E,
  DECAY_SPEC_RI,
  DECAY_SPEC_CONT_NE,
  DECAY_SPEC_CONT_INTT,
  DECAY_SPEC_CONT_PTR_E,
  DECAY_SPEC_CONT_PTR_PDF,
  DECAY_SPEC_CONT_PTR_CDF,
  DECAY_SPEC_BLOCK_SIZE
};

/*****************************************************************************/

/***** Statistical variable **************************************************/

/* T√§h√§n ei voi laittaa LIST_DATA_SIZE:a */

enum block_STAT {
  STAT_N,
  STAT_X,
  STAT_X2,
  STAT_BLOCK_SIZE
};

enum block_BUF {
  BUF_VAL,
  BUF_WGT,
  BUF_N,
  BUF_BLOCK_SIZE
};

/* FET aliases */

#define BUF_FET_VAL                   BUF_VAL
#define BUF_FET_SUM_SQ_SUM            BUF_WGT
#define BUF_FET_SUM                   BUF_N

/*****************************************************************************/

/***** ACE data array ********************************************************/

/* T√§ss√§ ei tarvita list dataa koska pointterit viittaa ACE taulukkoon */

enum block_ACE {
  ACE_PTR_ALIAS,
  ACE_PTR_NAME,
  ACE_TYPE,
  ACE_AW,
  ACE_AWR,
  ACE_ZAI,
  ACE_ZA,
  ACE_I,
  ACE_TEMP,
  ACE_PTR_LIB_ID,
  ACE_PTR_NXS,
  ACE_PTR_JXS,
  ACE_PTR_XSS,
  ACE_PTR_FILE,
  ACE_LAMBDA,
  ACE_DECAY_E,
  ACE_PTR_DECAY_LIST,
  ACE_SF_BR,
  ACE_SF_NUBAR,
  ACE_BOUND_ZA,
  ACE_PTR_RAD_SPEC,
  ACE_DELNU_PREC,
  ACE_PTR_NEXT,
  ACE_BLOCK_SIZE
};

/*****************************************************************************/

/***** Energy grid structure *************************************************/

/* NOTE: T√§m√§ on bin√§√§ripuurakenne joka ei k√§yt√§ linkitetyn listan */
/*       pointtereita tai rutiineja. */

enum block_ENERGY_GRID {
  ENERGY_GRID_NE,
  ENERGY_GRID_I0,
  ENERGY_GRID_EMIN,
  ENERGY_GRID_EMAX,
  ENERGY_GRID_EMID,
  ENERGY_GRID_PTR_LOW,
  ENERGY_GRID_PTR_HIGH,
  ENERGY_GRID_PTR_DATA,
  ENERGY_GRID_NB,
  ENERGY_GRID_PTR_BINS,
  ENERGY_GRID_LOG_EMIN,
  ENERGY_GRID_LOG_EMAX,
  ENERGY_GRID_TYPE,
  ENERGY_GRID_PTR_PREV_VAL,
  ENERGY_GRID_INTERP_MODE,
  ENERGY_GRID_ALLOC_NE,
  ENERGY_GRID_PTR_DIX_IDX,
  ENERGY_GRID_BLOCK_SIZE
};

/*****************************************************************************/

/***** Reaction data array ***************************************************/

enum block_REACTION {
  REACTION_TYPE = LIST_DATA_SIZE,
  REACTION_NR,
  REACTION_MT,
  REACTION_RTYP2,
  REACTION_RTYP3,
  REACTION_RTYP4,
  REACTION_RTYP5,
  REACTION_BR,
  REACTION_RFS,
  REACTION_AWR,
  REACTION_Q,
  REACTION_TY,
  REACTION_WGT_F,
  REACTION_EMIN,
  REACTION_EMAX,
  REACTION_PTR_EGRID,
  REACTION_PTR_XS,
  REACTION_XS_I0,
  REACTION_XS_NE,
  REACTION_TGT_ZAI,
  REACTION_PTR_TGT,
  REACTION_PTR_BRANCH_PARENT,
  REACTION_BRANCH_MT,
  REACTION_PTR_FISSY,
  REACTION_PTR_PARTIAL_LIST,
  REACTION_PTR_NUCLIDE,
  REACTION_PTR_PARENT_NUCLIDE,
  REACTION_PTR_MAT,
  REACTION_PTR_PREV_XS,
  REACTION_PTR_PREV_URES_XS0,
  REACTION_PTR_MAJORANT_XS,
  REACTION_PTR_URES,
  REACTION_PTR_ANG,
  REACTION_PTR_PHOTON_DIST,
  REACTION_URES_EMIN,
  REACTION_URES_EMAX,
  REACTION_PTR_ANA_RATE,
  REACTION_ITP,
  REACTION_SAB_EMAX,
  REACTION_SAB_FRAC,
  REACTION_PTR_TNUBAR,
  REACTION_PTR_DNUBAR,
  REACTION_PTR_PREC_LIST,
  REACTION_PTR_ERG,
  REACTION_PTR_TRANSMUXS,
  REACTION_FISSY_IE0,
  REACTION_FISSY_IE1,
  REACTION_FISSY_IE2,
  REACTION_I135_YIELD,
  REACTION_XE135_YIELD,
  REACTION_XE135M_YIELD,
  REACTION_PM147_YIELD,
  REACTION_PM148_YIELD,
  REACTION_PM148M_YIELD,
  REACTION_PM149_YIELD,
  REACTION_SM149_YIELD,
  REACTION_MODE,
  REACTION_PTR_MGXS,
  REACTION_PTR_URES_MAX,
  REACTION_URES_MAX_N0,
  REACTION_URES_MAX_NP,
  REACTION_SAB_MIN_EM_E,
  REACTION_SAB_MAX_EM_E,
  REACTION_CACHE_OPTI_IDX,
  REACTION_PTR_TMP_MAJORANT,
  REACTION_PTR_0K_DATA,
  REACTION_PTR_ISO_BRA,
  REACTION_PTR_MULT,
  REACTION_PTR_COVMTX_LIST,
  REACTION_BLOCK_SIZE
};

/*****************************************************************************/

/***** Reaction list array ***************************************************/

enum block_SAMPLE_LIST {
  SAMPLE_LIST_PTR_COMP = LIST_DATA_SIZE,
  SAMPLE_LIST_PTR_REA,
  SAMPLE_LIST_PTR_COUNT,
  SAMPLE_LIST_BLOCK_SIZE
};

enum block_RLS {
  RLS_PTR_MAT = LIST_DATA_SIZE,
  RLS_REA_MODE,
  RLS_PTR_REA0,
  RLS_PTR_NEXT,
  RLS_BLOCK_SIZE
};

enum block_RLS_DATA {
  RLS_DATA_PTR_NUCLIDE = LIST_DATA_SIZE,
  RLS_DATA_PTR_REA,
  RLS_DATA_COMP_IDX,
  RLS_DATA_EMIN,
  RLS_DATA_EMAX,
  RLS_DATA_PTR_COUNT,
  RLS_DATA_MAX_ADENS,
  RLS_DATA_CUT,
  RLS_DATA_BLOCK_SIZE
};

/*****************************************************************************/

/***** Nubar data ************************************************************/

enum block_NUBAR {
  NUBAR_DATA_TYPE = LIST_DATA_SIZE,
  NUBAR_PTR_POLY_DATA,
  NUBAR_PTR_EGRID,
  NUBAR_PTR_PTS,
  NUBAR_PTR_PREV_VAL,
  NUBAR_BLOCK_SIZE
};

/*****************************************************************************/

/***** Precursor data ********************************************************/

enum block_PREC {
  PREC_IDX = LIST_DATA_SIZE,
  PREC_LAMBDA,
  PREC_PTR_EGRID,
  PREC_PTR_PTS,
  PREC_PTR_ERG,
  PREC_BLOCK_SIZE
};

/*****************************************************************************/

/***** Precursor detector data ***********************************************/

/* There is probably only one of these (so no list needed) */

enum block_PRECDET {
  PRECDET_PTR_STAT = LIST_DATA_SIZE + PARAM_N_COMMON,
  PRECDET_PTR_DIM,
  PRECDET_PTR_MESH,
  PRECDET_PTR_PREC_ARRAY,
  PRECDET_PTR_LAM_ARRAY,
  PRECDET_PTR_REA_ARRAY,
  PRECDET_NT,
  PRECDET_NG,
  PRECDET_W_EMIT,
  PRECDET_MAX_WGT,
  PRECDET_W_LIVE,
  PRECDET_W_AVE,
  PRECDET_N_EMIT,
  PRECDET_N_LIVE,
  PRECDET_PTR_LIVE_DET,
  PRECDET_PTR_FILE_DET,
  PRECDET_PTR_OUT_FNAME,
  PRECDET_PTR_IN_FNAME,
  PRECDET_N0,
  PRECDET_N1,
  PRECDET_N2,
  PRECDET_PTR_PREC_DET,
  PRECDET_PTR_PREC_SRC,
  PRECDET_AVE_EMIT,
  PRECDET_SAVE_FRAC_LIVE,
  PRECDET_SAVE_FRAC_PREC,
  PRECDET_PTR_MESH_LIST,
  PRECDET_BLOCK_SIZE
};

/*****************************************************************************/

/***** Value pair list *******************************************************/

enum block_VP {
  VP_PTR = LIST_DATA_SIZE,
  VP_BLOCK_SIZE
};

/*****************************************************************************/

/***** Photon production data ************************************************/

enum block_PHOTON_PROD {
  PHOTON_PROD_MT = LIST_DATA_SIZE,
  PHOTON_PROD_PTR_EGRID,
  PHOTON_PROD_PTR_PRODXS,
  PHOTON_PROD_PTR_ANG,
  PHOTON_PROD_PTR_ERG,
  PHOTON_PROD_PTR_URES_REA,
  PHOTON_PROD_EMIN,
  PHOTON_PROD_BLOCK_SIZE
};

/*****************************************************************************/

/***** RIA simulation ********************************************************/

enum block_RIA {
  RIA_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  RIA_PTR_TME,
  RIA_BLOCK_SIZE
};

/*****************************************************************************/

/***** Energy distribution data **********************************************/

enum block_ERG {
  ERG_PTR_NUCLIDE = LIST_DATA_SIZE,
  ERG_PTR_EGRID,
  ERG_PTR_PROB,
  ERG_LAW,
  ERG_INTERP,
  ERG_PTR_DATA,
  ERG_NR,
  ERG_PTR_INTERP,
  ERG_BLOCK_SIZE
};

/*****************************************************************************/

/***** Photon distribution data **********************************************/

enum block_PHOTON_DIST {
/* Rayleigh scattering */

  PHOTON_DIST_RAYL_N = LIST_DATA_SIZE,
  PHOTON_DIST_RAYL_X2,
  PHOTON_DIST_RAYL_FF2INT,
  PHOTON_DIST_RAYL_FF2,
  PHOTON_DIST_RAYL_LX2,
  PHOTON_DIST_RAYL_C,

/* Compton scattering */

  PHOTON_DIST_COMP_NISF,
  PHOTON_DIST_COMP_ISFX,
  PHOTON_DIST_COMP_LISFX,
  PHOTON_DIST_COMP_LISF,
  PHOTON_DIST_COMP_NCP,
  PHOTON_DIST_COMP_CPPZ,
  PHOTON_DIST_COMP_CP,
  PHOTON_DIST_COMP_CPINT,
  PHOTON_DIST_COMP_CPA,
  PHOTON_DIST_COMP_CPEXTA,
  PHOTON_DIST_COMP_CPEXTB,
  PHOTON_DIST_COMP_CPEXTI,
  PHOTON_DIST_COMP_CPINTMIN,
  PHOTON_DIST_COMP_PZMINIDX,
  PHOTON_DIST_COMP_NSS,
  PHOTON_DIST_COMP_EBI,
  PHOTON_DIST_COMP_ELN,
  PHOTON_DIST_COMP_ELNCDF,

/* Pair production */

  PHOTON_DIST_PP_MDXSFC1,
  PHOTON_DIST_PP_MDXSFC2,
  PHOTON_DIST_PP_FC,
  PHOTON_DIST_PP_F0,
  PHOTON_DIST_PP_G0,

/* Photoelectric effect */

  PHOTON_DIST_PE_NSS,
  PHOTON_DIST_PE_IDXSS,
  PHOTON_DIST_PE_EBI,
  PHOTON_DIST_PE_LPSS,
  PHOTON_DIST_PE_NE,
  PHOTON_DIST_PE_E,
  PHOTON_DIST_PE_PSS,
  PHOTON_DIST_PE_AR_E,
  PHOTON_DIST_PE_AR_CDF,
  PHOTON_DIST_BLOCK_SIZE
};

/*****************************************************************************/

/***** Thick-target bremsstrahlung data **************************************/

enum block_TTB {
  TTB_NE = LIST_DATA_SIZE,
  TTB_E,
  TTB_LE,
  TTB_BRECDF,
  TTB_BRPCDF,
  TTB_BREPDF,
  TTB_BRPPDF,
  TTB_YE,
  TTB_LYE,
  TTB_YP,
  TTB_LYP,
  TTB_INTCE,
  TTB_INTCP,
  TTB_BLOCK_SIZE
};

/*****************************************************************************/

/***** Electron data *********************************************************/

enum block_EL {
  EL_MEE = LIST_DATA_SIZE,
  EL_COND,
  EL_GAS,
  EL_BLOCK_SIZE
};

/*****************************************************************************/

/***** Atomic relaxation data ************************************************/

enum block_RELAX {
  RELAX_NSS = LIST_DATA_SIZE,
  RELAX_NTR,
  RELAX_EBI,
  RELAX_ELN,
  RELAX_ETR,
  RELAX_LETR,
  RELAX_IDX_RAD,
  RELAX_SUBI,
  RELAX_SUBJ,
  RELAX_SUBK,
  RELAX_D2IMAP,
  RELAX_ELNCDF,
  RELAX_ALIAS1,
  RELAX_ALIAS2,
  RELAX_CUTOFF,
  RELAX_BLOCK_SIZE
};

/*****************************************************************************/

/***** Fission energy deposition data ****************************************/

/* These are not linked lists!! */

enum block_FISSE_DATA {
  FISSE_DATA_NPLY,
  FISSE_DATA_LFC,
  FISSE_DATA_COMP,
  FISSE_DATA_COMP_TYPES,
  FISSE_DATA_NUBAR0,
  FISSE_DATA_BLOCK_SIZE
};

enum block_FISSE_TAB {
  FISSE_TAB_NR,
  FISSE_TAB_NBT,
  FISSE_TAB_INT,
  FISSE_TAB_NP,
  FISSE_TAB_ERG, 
  FISSE_TAB_EDEP,
  FISSE_TAB_BLOCK_SIZE
};

enum block_FISSE_COMP {
  FISSE_COMP_EFR,
  FISSE_COMP_ENP,
  FISSE_COMP_END,
  FISSE_COMP_EGP,
  FISSE_COMP_EGD, 
  FISSE_COMP_EB,
  FISSE_COMP_ENU,
  FISSE_COMP_ER,
  FISSE_COMP_ET,
  FISSE_COMP_BLOCK_SIZE
};

/*****************************************************************************/

/***** Isomeric branching ratio data *****************************************/

enum block_BRA_LIST {
  BRA_LIST_ZAI = LIST_DATA_SIZE,
  BRA_LIST_MT,
  BRA_LIST_NS,
  BRA_LIST_FILE,
  BRA_LIST_NP,
  BRA_LIST_INTT,
  BRA_LIST_PTR_E,
  BRA_LIST_PTR_F,
  BRA_LIST_FIX_FRAC,
  BRA_LIST_PTR_FNAME,
  BRA_LIST_BLOCK_SIZE
};

enum block_FIX_BRA {
  FIX_BRA_ZAI = LIST_DATA_SIZE,
  FIX_BRA_MT,
  FIX_BRA_FRAC,
  FIX_BRA_BLOCK_SIZE
};

/*****************************************************************************/

/***** Depletion transmutation list ******************************************/

enum block_DEP_TRA {
  DEP_TRA_PTR_REA = LIST_DATA_SIZE,
  DEP_TRA_E0,
  DEP_TRA_PTR_RESU,
  DEP_TRA_PS1,
  DEP_TRA_BOS,
  DEP_TRA_EOS,
  DEP_TRA_REL,
  DEP_TRA_AV0,
  DEP_TRA_AV1,
  DEP_TRA_AVE,
  DEP_TRA_BLOCK_SIZE
};

/*****************************************************************************/

/***** Fission yield data array **********************************************/

/* Data block */

enum block_FISSION_YIELD {
  FISSION_YIELD_PARENT_ZAI = LIST_DATA_SIZE,
  FISSION_YIELD_IDX,
  FISSION_YIELD_E,
  FISSION_YIELD_NFP,
  FISSION_YIELD_ORIG_NFP,
  FISSION_YIELD_PTR_DISTR,
  FISSION_YIELD_PTR_NEXT,
  FISSION_YIELD_BLOCK_SIZE
};

/* Yield entry */

enum block_FY {
  FY_TGT_ZAI = LIST_DATA_SIZE,
  FY_PTR_TGT,
  FY_INDEPENDENT_FRAC,
  FY_CUMULATIVE_FRAC,
  FY_BLOCK_SIZE
};

/*****************************************************************************/

/***** Decay array ***********************************************************/

enum block_DECAY {
  DECAY_RTYP1 = LIST_DATA_SIZE,
  DECAY_RTYP2,
  DECAY_RTYP3,
  DECAY_RTYP4,
  DECAY_RTYP5,
  DECAY_RFS,
  DECAY_Q,
  DECAY_BR,
  DECAY_BLOCK_SIZE
};

/*****************************************************************************/

/***** Radiation spectrum block size *****************************************/

enum block_RAD_SPEC {
  RAD_SPEC_TYPE = LIST_DATA_SIZE,
  RAD_SPEC_AVG_E,
  RAD_SPEC_DISC_NORM,
  RAD_SPEC_DISC_NE,
  RAD_SPEC_PTR_DISC_E,
  RAD_SPEC_PTR_DISC_RI,
  RAD_SPEC_CONT_NORM,
  RAD_SPEC_CONT_NE,
  RAD_SPEC_CONT_INTT,
  RAD_SPEC_PTR_CONT_E,
  RAD_SPEC_PTR_CONT_PDF,
  RAD_SPEC_PTR_CONT_CDF,
  RAD_SPEC_BLOCK_SIZE
};

/*****************************************************************************/

/***** Thermal scattering library data ***************************************/

enum block_THERM {
  THERM_OPTIONS = LIST_DATA_SIZE + PARAM_N_COMMON,
  THERM_PTR_ALIAS,
  THERM_ZA,
  THERM_T,
  THERM_PTR_SAB,
  THERM_PTR_THERM,
  THERM_PTR_COMP,
  THERM_INTERP_MODE,
  THERM_OTF_MIN_TEMP,
  THERM_OTF_MAX_TEMP,
  THERM_BLOCK_SIZE
};

/*****************************************************************************/

/***** S(a,b) nuclide data  **************************************************/

enum block_SAB {
  SAB_PTR_NAME = LIST_DATA_SIZE,
  SAB_T,
  SAB_PTR_ISO,
  SAB_FRAC,
  SAB_PTR_PREV_FRAC,
  SAB_PTR_PREV_SAB1,
  SAB_BLOCK_SIZE
};

/*****************************************************************************/

/***** Unresolved resonance probability table data ***************************/

enum block_URES {
  URES_PTR_EGRID = LIST_DATA_SIZE,
  URES_NP,
  URES_INT,
  URES_PTR_PROB,
  URES_IFF,
  URES_PTR_FACT,
  URES_PTR_MAXF,
  URES_PTR_RND,
  URES_PTR_RND_CHK,
  URES_PTR_PREV_FACT,
  URES_BLOCK_SIZE
};

/*****************************************************************************/

/***** Angular distribution **************************************************/

enum block_ANG {
  ANG_PTR_EGRID = LIST_DATA_SIZE,
  ANG_TYPE,
  ANG_PTR_D0,
  ANG_BINS,
  ANG_INTT,
  ANG_BLOCK_SIZE
};

/*****************************************************************************/

/***** Surface ***************************************************************/

/* Surface types */

#define SURFACE_TYPES   46

#define SURF_CYL         1
#define SURF_PX          2
#define SURF_PY          3
#define SURF_PZ          4
#define SURF_INF         5
#define SURF_SQC         6
#define SURF_HEXYC       7
#define SURF_HEXXC       8
#define SURF_SPH         9
#define SURF_CROSS      10
#define SURF_PAD        11
#define SURF_CUBE       12
#define SURF_CONE       13
#define SURF_SVC        14
#define SURF_CUBOID     15
#define SURF_HEXYPRISM  16
#define SURF_HEXXPRISM  17
#define SURF_DODE       18
#define SURF_OCTA       19
#define SURF_ASTRA      20
#define SURF_PLANE      21
#define SURF_QUADRATIC  22
#define SURF_CYLX       23
#define SURF_CYLY       24
#define SURF_CYLZ       25
#define SURF_GCROSS     26
#define SURF_PPD        27
#define SURF_RECT       28
#define SURF_CKX        29
#define SURF_CKY        30
#define SURF_CKZ        31
#define SURF_X          32
#define SURF_Y          33
#define SURF_Z          34
#define SURF_TORX       35
#define SURF_TORY       36
#define SURF_TORZ       37
#define SURF_CYLV       38
#define SURF_BOX        39
#define SURF_MPLANE     40
#define SURF_RCC        41
#define SURF_HEXXAP     42
#define SURF_HEXYAP     43
#define SURF_INVOLUTE   44
#define SURF_TRIAG      45
#define SURF_USER       46

/* Data block */

enum block_SURFACE {
  SURFACE_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  SURFACE_OPTIONS,
  SURFACE_TYPE,
  SURFACE_PTR_PARAMS,
  SURFACE_N_PARAMS,
  SURFACE_PTR_TRANS,
  SURFACE_NAME_NUMERIC,
  SURFACE_PTR_CELL_LIST,
  SURFACE_BLOCK_SIZE
};

/* List of outer boundaries */

enum block_BOUNDS {
  BOUNDS_PTR_SURF = LIST_DATA_SIZE,
  BOUNDS_BLOCK_SIZE
};

/*****************************************************************************/

/***** Cell ******************************************************************/

/* Cell types */

#define CELL_TYPE_MAT      1
#define CELL_TYPE_VOID     2
#define CELL_TYPE_OUTSIDE  3
#define CELL_TYPE_FILL     4

/* Data block (t√§n koko voi olla merkitt√§v√§ tekij√§ unstructured */
/* mesh -tyyppisiss√§ geometrioissa. */

enum block_CELL {
  CELL_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  CELL_TYPE,
  CELL_OPTIONS,
  CELL_PTR_UNI,
  CELL_PTR_MAT,
  CELL_PTR_FILL,
  CELL_PTR_SURF_LIST,
  CELL_PTR_SURF_COMP,
  CELL_PTR_SURF_INSC,
  CELL_COL_COUNT,
  CELL_VOLUME,
  CELL_VOL_COUNT,
  CELL_PTR_REG_MAT,
  CELL_UMSH_IDX,
  CELL_UMSH_DET_BIN,
  CELL_PTR_BC_SURF,
  CELL_PTR_DETBIN,
  CELL_PTR_PREV_TET,
  CELL_PTR_TRANS,
  CELL_PTR_MC_VOLUME,
  CELL_PTR_MC_DENSITY,
  CELL_PTR_SEARCH_LIST,
  CELL_IMP,
  CELL_BLOCK_SIZE
};

/* Universe cell list */

enum block_CELL_LIST {
  CELL_LIST_PTR_CELL = LIST_DATA_SIZE,
  CELL_LIST_PTR_COUNT,
  CELL_LIST_REG_IDX,
  CELL_LIST_BLOCK_SIZE
};

/* List of intersections */

enum block_CELL_INSC {
  CELL_INSC_PTR_SURF = LIST_DATA_SIZE,
  CELL_INSC_SIDE,
  CELL_INSC_PTR_OUT_COUNT,
  CELL_INSC_PTR_NEXT_TET_CELL,
  CELL_INSC_BLOCK_SIZE
};

/*****************************************************************************/

/***** Cell search mesh ******************************************************/        

enum block_CELL_SEARCH_MESH {
  CELL_SEARCH_MESH_PTR_MSH = LIST_DATA_SIZE,
  CELL_SEARCH_MESH_IDX,
  CELL_SEARCH_MESH_N,
  CELL_SEARCH_MESH_PTR_C1,
  CELL_SEARCH_MESH_PTR_C2,
  CELL_SEARCH_MESH_PTR_C3,
  CELL_SEARCH_MESH_PTR_C4,
  CELL_SEARCH_MESH_PTR_C5,
  CELL_SEARCH_MESH_SIZE
};

/* Maximum size */

#define MAX_CELL_SEARCH_MESH_SZ 5

/*****************************************************************************/

/***** Super-imposed cell mesh ***********************************************/

enum block_CELL_MESH {
  CELL_MESH_PTR_UNI = LIST_DATA_SIZE,
  CELL_MESH_PTR_MESH,
  CELL_MESH_TYPE,
  CELL_MESH_N0,
  CELL_MESH_N1,
  CELL_MESH_N2,
  CELL_MESH_MIN0,
  CELL_MESH_MAX0,
  CELL_MESH_MIN1,
  CELL_MESH_MAX1,
  CELL_MESH_MIN2,
  CELL_MESH_MAX2,
  CELL_MESH_BLOCK_SIZE
};

/*****************************************************************************/

/***** Nest ******************************************************************/

enum block_NEST {
  NEST_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  NEST_OPTIONS,
  NEST_PTR_UNI,
  NEST_PTR_REGIONS,
  NEST_TYPE,
  NEST_PTR_COL_REG,
  NEST_COUNT,
  NEST_PTR_BC_SURF,
  NEST_BLOCK_SIZE
};

enum block_NEST_REG {
  NEST_REG_PTR_FILL = LIST_DATA_SIZE,
  NEST_REG_TMP_PTR,
  NEST_REG_PTR_SURF_IN,
  NEST_REG_PTR_SURF_OUT,
  NEST_REG_PTR_CELL,
  NEST_REG_IDX,
  NEST_REG_BLOCK_SIZE
};

/*****************************************************************************/

/***** Coordinate transformation *********************************************/

enum block_TRANS {
  TRANS_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  TRANS_TYPE,
  TRANS_PTR_UNI,
  TRANS_PTR_SURF,
  TRANS_PTR_CELL,
  TRANS_PTR_DET,
  TRANS_PTR_LAT,
  TRANS_LAT_IDX,
  TRANS_MOVE_TYPE,
  TRANS_BURNUP,
  TRANS_OPTIONS,
  TRANS_ROT,
  TRANS_X0,
  TRANS_Y0,
  TRANS_Z0,
  TRANS_RX1,
  TRANS_RX2,
  TRANS_RX3,
  TRANS_RX4,
  TRANS_RX5,
  TRANS_RX6,
  TRANS_RX7,
  TRANS_RX8,
  TRANS_RX9,
  TRANS_RY1,
  TRANS_RY2,
  TRANS_RY3,
  TRANS_RY4,
  TRANS_RY5,
  TRANS_RY6,
  TRANS_RY7,
  TRANS_RY8,
  TRANS_RY9,
  TRANS_RZ1,
  TRANS_RZ2,
  TRANS_RZ3,
  TRANS_RZ4,
  TRANS_RZ5,
  TRANS_RZ6,
  TRANS_RZ7,
  TRANS_RZ8,
  TRANS_RZ9,
  TRANS_PTR_LVL,
  TRANS_T0,
  TRANS_T1,
  TRANS_T_TYPE,
  TRANS_ORDER,
  TRANS_EXPLI,
  TRANS_ROT_ANG,
  TRANS_ROT_AX_U,
  TRANS_ROT_AX_V,
  TRANS_ROT_AX_W,
  TRANS_BLOCK_SIZE
};

/*****************************************************************************/

/***** Geometry plotter ******************************************************/

enum block_GPL {
  GPL_IDX = LIST_DATA_SIZE + PARAM_N_COMMON,
  GPL_GEOM,
  GPL_PIX_X,
  GPL_PIX_Y,
  GPL_POS,
  GPL_XMIN,
  GPL_XMAX,
  GPL_YMIN,
  GPL_YMAX,
  GPL_ZMIN,
  GPL_ZMAX,
  GPL_PLOT_BOUND,
  GPL_IMP_SCALE,
  GPL_IMP_MIN,
  GPL_IMP_MAX,
  GPL_IMP_E,
  GPL_BLOCK_SIZE
};

/*****************************************************************************/

/***** Pebble bed geometry ***************************************************/

enum block_PBED {
  PBED_OPTIONS = LIST_DATA_SIZE + PARAM_N_COMMON,
  PBED_PTR_FNAME,
  PBED_N_PEBBLES,
  PBED_PTR_NAME,
  PBED_PTR_UNI,
  PBED_PTR_PEBBLES,
  PBED_PTR_SEARCH_MESH,
  PBED_PTR_BG_UNIV,
  PBED_CALC_RESULTS,
  PBED_PTR_COL_PEBBLE,
  PBED_PTR_PEBBLE_TYPES,
  PBED_PTR_POW,
  PBED_BLOCK_SIZE
};

enum block_PEBBLE {
  PEBBLE_PTR_UNIV = LIST_DATA_SIZE,
  PEBBLE_X0,
  PEBBLE_Y0,
  PEBBLE_Z0,
  PEBBLE_RAD,
  PEBBLE_IDX,
  PEBBLE_BLOCK_SIZE
};

enum block_PEBTYPE {
  PEBTYPE_PTR_UNIV = LIST_DATA_SIZE,
  PEBTYPE_COUNT,
  PEBTYPE_BLOCK_SIZE
};

/*****************************************************************************/

/***** Unstructured mesh geometry ********************************************/

enum block_UMSH {
  UMSH_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  UMSH_PTR_UNI,
  UMSH_PTR_BG_UNIV,
  UMSH_N_ORIG_CELLS,
  UMSH_N_CELLS,
  UMSH_OPTIONS,
  UMSH_PTR_IFC,
  UMSH_PTR_FNAME,
  UMSH_BLOCK_SIZE
};

/*****************************************************************************/

/***** STL based geometry ****************************************************/

enum block_STL {
  STL_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  STL_PTR_UNI,
  STL_OPTIONS,
  STL_PTR_BG_UNIV,
  STL_PTR_FILES,
  STL_PTR_BODIES,
  STL_PTR_SOLIDS,
  STL_SEARCH_MESH_ADA_SPLIT,
  STL_SEARCH_MESH_PTR_SZ,
  STL_PTR_FACET_MESH,
  STL_PTR_SOLID_MESH,
  STL_XMIN,
  STL_XMAX,
  STL_YMIN,
  STL_YMAX,
  STL_ZMIN,
  STL_ZMAX,
  STL_MERGE_RAD,
  STL_SEARCH_MESH_CELLS,
  STL_SEARCH_MODE,
  STL_SEARCH_MESH_V,
  STL_BLOCK_SIZE
};

enum block_STL_FILE {
  STL_FILE_PTR_FNAME = LIST_DATA_SIZE,
  STL_FILE_PTR_SNAME,
  STL_FILE_SCALING,
  STL_FILE_X0,
  STL_FILE_Y0,
  STL_FILE_Z0,
  STL_FILE_BLOCK_SIZE
};

enum block_STL_BODY {
  STL_BODY_PTR_BNAME = LIST_DATA_SIZE,
  STL_BODY_PTR_CNAME,
  STL_BODY_PTR_MNAME,
  STL_BODY_PTR_FILL,
  STL_BODY_PTR_CELL,
  STL_BODY_N_PARTS,
  STL_BODY_N_POINTS,
  STL_BODY_N_FACETS,
  STL_BODY_BLOCK_SIZE
};

enum block_STL_SOLID {
  STL_SOLID_PTR_STL_NAME = LIST_DATA_SIZE,
  STL_SOLID_IDX,
  STL_SOLID_PTR_FNAME,
  STL_SOLID_PTR_CELL,
  STL_SOLID_N_POINTS,
  STL_SOLID_N_FACETS,
  STL_SOLID_PTR_FACETS,
  STL_SOLID_XMIN,
  STL_SOLID_XMAX,
  STL_SOLID_YMIN,
  STL_SOLID_YMAX,
  STL_SOLID_ZMIN,
  STL_SOLID_ZMAX,
  STL_SOLID_PTR_BODY,
  STL_SOLID_REG_IDX,
  STL_SOLID_BLOCK_SIZE
};

enum block_STL_POINT {
  STL_POINT_X = LIST_DATA_SIZE,
  STL_POINT_Y,
  STL_POINT_Z,
  STL_POINT_BLOCK_SIZE
};

enum block_STL_FACET {
  STL_FACET_IDX,
  STL_FACET_NORM_U,
  STL_FACET_NORM_V,
  STL_FACET_NORM_W,
  STL_FACET_PTR_PT1,
  STL_FACET_PTR_PT2,
  STL_FACET_PTR_PT3,
  STL_FACET_PTR_SOLID,
  STL_FACET_XMIN,
  STL_FACET_XMAX,
  STL_FACET_YMIN,
  STL_FACET_YMAX,
  STL_FACET_ZMIN,
  STL_FACET_ZMAX,
  STL_FACET_BLOCK_SIZE
};

/* STL Search mesh content (pointers to facet and solid lists) */

enum block_STL_SEARCH_MESH_CONTENT {
  STL_SEARCH_MESH_CONTENT_PTR_FACETS,
  STL_SEARCH_MESH_CONTENT_PTR_SOLIDS,
  STL_SEARCH_MESH_CONTENT_BLOCK_SIZE
};

/*****************************************************************************/

/***** Search mesh ***********************************************************/

/* List for search mesh */

enum block_SEARCH_MESH_CELL {
  SEARCH_MESH_CELL_CONTENT = LIST_DATA_SIZE,
  SEARCH_MESH_PTR_CELL_COUNT,
  SEARCH_MESH_CELL_BLOCK_SIZE
};

/*****************************************************************************/

/***** Multi-physics interface ***********************************************/

/* TODO: Most of these are really specific to different interface types. */
/*       Maybe create an intermediate level for specific interface types */

enum block_IFC {
  IFC_IDX = LIST_DATA_SIZE + PARAM_N_COMMON,
  IFC_DIM,
  IFC_PTR_INPUT_FNAME,
  IFC_PTR_OUTPUT_FNAME,
  IFC_PTR_NAME,
  IFC_PTR_T_FIELD_NAME,
  IFC_PTR_RHO_FIELD_NAME,
  IFC_PTR_POWER_FIELD_NAME,
  IFC_TYPE,
  IFC_EXCL_RAD,
  IFC_EXP,
  IFC_N_MAT,
  IFC_PTR_MAT_ARR,
  IFC_PTR_OUTPUT_MAT,
  IFC_MIN_DENSITY,
  IFC_MAX_DENSITY,
  IFC_MIN_TEMP,
  IFC_MAX_TEMP,
  IFC_SEARCH_MESH_NX,
  IFC_SEARCH_MESH_NY,
  IFC_SEARCH_MESH_NZ,
  IFC_SEARCH_MESH_ADA_SPLIT,
  IFC_SEARCH_MESH_ADA_PTR_SZ,
  IFC_PTR_SEARCH_MESH_LIST,
  IFC_PTR_LATTICE_LIST,
  IFC_N_MESH_LVL,
  IFC_NP,
  IFC_ARR_SIZE,
  IFC_PTR_OUTPUT,
  IFC_NZ,
  IFC_ZMIN,
  IFC_ZMAX,
  IFC_NR,
  IFC_PTR_OUT,
  IFC_PTR_POINTS,
  IFC_FUNC_NP,
  IFC_FUNC_PTR_PARAM,
  IFC_CALC_OUTPUT,
  IFC_PTR_TET_MSH,
  IFC_PTR_TET_MSH_PARENTS,
  IFC_MESH_XMIN,
  IFC_MESH_XMAX,
  IFC_MESH_YMIN,
  IFC_MESH_YMAX,
  IFC_MESH_ZMIN,
  IFC_MESH_ZMAX,
  IFC_PTR_SCORE,
  IFC_PTR_STAT,
  IFC_PTR_STAT_REL,
  IFC_PTR_STAT_PREV,
  IFC_PTR_STAT_GRD,
  IFC_PTR_STAT_VOL,
  IFC_STAT_NREG,
  IFC_OUTPUT_TYPE,
  IFC_PTR_FUEP,
  IFC_PTR_PREV_CELL,
  IFC_PTR_PREV_COL_CELL,
  IFC_OUT_PTR_LIM,
  IFC_OUT_PTR_Z,
  IFC_OUT_PTR_PHI,
  IFC_OUT_PTR_R2,
  IFC_PTR_OF_PFILE,
  IFC_PTR_OF_FFILE,
  IFC_PTR_OF_OFILE,
  IFC_PTR_OF_NFILE,
  IFC_PTR_OF_RFILE,
  IFC_PTR_OF_TFILE,
  IFC_PTR_OF_MAPFILE,
  IFC_PTR_OF_PATCHES,
  IFC_MEM_SIZE,
  IFC_PTR_OF_MFILE,
  IFC_PTR_GCELL_LIST,
  IFC_PTR_POINT_LIST,
  IFC_PTR_SURF_LIST_PARENTS,
  IFC_PTR_OWNR_LIST_PARENTS,
  IFC_PTR_NBR_LIST_PARENTS,
  IFC_PTR_POINT_LIST_PARENTS,
  IFC_PTR_CELL_CP_LIST_PARENTS,
  IFC_PTR_FACE_CP_LIST_PARENTS,
  IFC_PTR_TMP_LIST,
  IFC_PTR_DF_LIST,
  IFC_PTR_TMP_LIST_BOI,
  IFC_PTR_DF_LIST_BOI,
  IFC_NC_PARENTS,
  IFC_NF_PARENTS,
  IFC_NC,
  IFC_TEMPERATURE_TYPE,
  IFC_DENSITY_TYPE,
  IFC_NOMINAL_TEMPERATURE,
  IFC_NOMINAL_DENSITY,
  IFC_PTR_TET_LIST,
  IFC_PRINT_ERROR,
  IFC_SCORE_ALL_MATERIALS,
  IFC_BLOCK_SIZE
};

/* Start: Reuse some slots for the FETs */
#define IFC_FET_INPUT_PARAMS_PTR      IFC_MESH_XMIN
#define IFC_FET_OUTPUT_PARAMS_PTR     IFC_MESH_XMAX
#define IFC_FET_INPUT_COEFS_SIZE      IFC_MESH_YMIN
#define IFC_FET_PTR_INPUT_COEFS_ARRAY IFC_MESH_YMAX
/*#define IFC_FE_EFFECT_MAT_PTR         IFC_MESH_ZMIN*/
/* End: Reuse some slots for the FETs */

/* Points */

enum block_IFC_PT_LIST {
  IFC_PT_X = LIST_DATA_SIZE,
  IFC_PT_Y,
  IFC_PT_Z,
  IFC_PT_DF,
  IFC_PT_TMP,
  IFC_PT_LIST_BLOCK_SIZE
};

/* Type 2: Regular mesh */

enum block_IFC_REG_MSH_LIST {
  IFC_REG_MSH_DF = LIST_DATA_SIZE,
  IFC_REG_MSH_TMP,
  IFC_REG_MSH_LIST_BLOCK_SIZE
};

/* Type 4: Unstructured tetrahedral mesh based distribution */
/* NB: The structure is different for original and child    */
/*     cells. Modifications should be done with utmost care */

#define IFC_TET_MSH_LIST_BLOCK_SIZE    (LIST_DATA_SIZE + 12)
#define IFC_TET_MSH_CHILD_BLOCK_SIZE   (LIST_DATA_SIZE +  3)

#define IFC_TET_MSH_NF                 (LIST_DATA_SIZE +  0)
#define IFC_TET_MSH_PTR_FACES          (LIST_DATA_SIZE +  1)
#define IFC_TET_MSH_PTR_SIDES          (LIST_DATA_SIZE +  2)

/* NB: The following variables only exist for the initial */
/*     (parent) cells. */

#define IFC_TET_PRNT_IDX                (LIST_DATA_SIZE +  3)
#define IFC_TET_PRNT_PTR_CELL           (LIST_DATA_SIZE +  4)
#define IFC_TET_PRNT_XMIN               (LIST_DATA_SIZE +  5)
#define IFC_TET_PRNT_XMAX               (LIST_DATA_SIZE +  6)
#define IFC_TET_PRNT_YMIN               (LIST_DATA_SIZE +  7)
#define IFC_TET_PRNT_YMAX               (LIST_DATA_SIZE +  8)
#define IFC_TET_PRNT_ZMIN               (LIST_DATA_SIZE +  9)
#define IFC_TET_PRNT_ZMAX               (LIST_DATA_SIZE + 10)
#define IFC_TET_PRNT_STAT_IDX           (LIST_DATA_SIZE + 11)

#define TET_BLOCK_SIZE                    9

#define TET_PTR_PARENT                    0
#define TET_POINTS                        1
#define TET_NEIGHBOURS                    5

/* Minimal surface-type for UMSH-cells */

enum block_UMSH_SURF {
  UMSH_SURF_N_POINTS,
  UMSH_SURF_PTR_POINTS,
  UMSH_SURF_BLOCK_SIZE
};

/* OpenFOAM batches */

enum block_IFC_OF_PATCH {
  IFC_OF_PATCH_PTR_NAME = LIST_DATA_SIZE,
  IFC_OF_PATCH_PTR_TYPE,
  IFC_OF_PATCH_BLOCK_SIZE
};

/* Type 5: Interface for fuel performance codes */
/* This block corresponds to a single rod       */

enum block_IFC_FUEP_LIST {
  IFC_FUEP_PTR_UNI = LIST_DATA_SIZE,
  IFC_FUEP_OUT_PTR_LIM,
  IFC_FUEP_OUT_PTR_Z,
  IFC_FUEP_OUT_PTR_R2,
  IFC_FUEP_OUT_PTR_PHI,
  IFC_FUEP_PTR_POWER,
  IFC_FUEP_OUT_PTR_FLIM,
  IFC_FUEP_OUT_PTR_FZ,
  IFC_FUEP_OUT_PTR_FR2,
  IFC_FUEP_OUT_PTR_FPHI,
  IFC_FUEP_PTR_FLUX,
  IFC_FUEP_TYPE,
  IFC_FUEP_PTR_UNI_LIST,
  IFC_FUEP_N_UNI,
  IFC_FUEP_OUT_PTR_TB,
  IFC_FUEP_OUT_PTR_FTB,
  /*
  IFC_FUEP_PTR_T_BOI,
  IFC_FUEP_PTR_T,
  */
  IFC_FUEP_PTR_POWER_REL,
  IFC_FUEP_PTR_POWER_GRD,
  IFC_FUEP_PTR_POWER_PREV,
  IFC_FUEP_PTR_FINIX,
  IFC_FUEP_N_AX,
  IFC_FUEP_PTR_AX,
  IFC_FUEP_LIST_BLOCK_SIZE
};

enum block_IFC_FUEP_AX {
  IFC_FUEP_AX_ZMIN = LIST_DATA_SIZE,
  IFC_FUEP_AX_ZMAX,
  IFC_FUEP_AX_N_ANG,
  IFC_FUEP_AX_PTR_ANG,
  IFC_FUEP_AX_BLOCK_SIZE
};

enum block_IFC_FUEP_ANG {
  IFC_FUEP_ANG_AMIN = LIST_DATA_SIZE,
  IFC_FUEP_ANG_AMAX,
  IFC_FUEP_ANG_CMIN,
  IFC_FUEP_ANG_CMAX,
  IFC_FUEP_ANG_N_RAD,
  IFC_FUEP_ANG_PTR_DF_BOI,
  IFC_FUEP_ANG_PTR_DF,
  IFC_FUEP_ANG_PTR_TMP_BOI,
  IFC_FUEP_ANG_PTR_TMP,
  IFC_FUEP_ANG_PTR_COLD_R2,
  IFC_FUEP_ANG_PTR_HOT_R2_BOI,
  IFC_FUEP_ANG_PTR_HOT_R2,
  IFC_FUEP_ANG_BLOCK_SIZE
};

/* Scoring regions (this is needed to keep list sorted based on geometry */
/* region index, while the output list is sorted based on coordinates).  */

enum block_IFC_SCORE_LIST {
  IFC_SCORE_REG_IDX = LIST_DATA_SIZE,
  IFC_SCORE_STAT_IDX,
  IFC_SCORE_PTR_OUT,
  IFC_SCORE_LIST_BLOCK_SIZE
};

/* Output for power distribution (other types than tet mesh) */

enum block_IFC_OUT_LIST {
  IFC_OUT_X0 = LIST_DATA_SIZE,
  IFC_OUT_Y0,
  IFC_OUT_R,
  IFC_OUT_PTR_IFC,
  IFC_OUT_PTR_SCORE,
  IFC_OUT_LIST_BLOCK_SIZE
};

/* Pointers for FUEP parameters (NOTE: N√§it√§ ei voi varate NewItem():ll√§, */
/* eik√§ niihin voi k√§ytt√§√§ NextItem() etc. funktioita koska tossa ei ole  */
/* LIST_DATA_SIZE:a mukana. */

#define FUEP_LIM_SIZE                11

#define FUEP_NZ                       0
#define FUEP_ZMIN                     1
#define FUEP_ZMAX                     2
#define FUEP_NA                       3
#define FUEP_AMIN                     4
#define FUEP_AMAX                     5
#define FUEP_NR                       6
#define FUEP_RMIN                     7
#define FUEP_RMAX                     8
#define FUEP_EMIN                     9
#define FUEP_EMAX                    10

/*****************************************************************************/

/***** General data interface ************************************************/

enum block_DATAIFC
{
  DATAIFC_PTR_INPUT_FNAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  DATAIFC_DATA_TYPE,
  DATAIFC_PTR_MESH,
  DATAIFC_PTR_DATA,
  DATAIFC_DATA_MEM_SIZE,
  DATAIFC_PTR_MAT_ARR,
  DATAIFC_PTR_NUCLIDE,
  DATAIFC_MIN_VAL,
  DATAIFC_MAX_VAL,
  DATAIFC_BLOCK_SIZE
};

/*****************************************************************************/

/***** Lattice ***************************************************************/

#define LATTICE_TYPES    14

#define LAT_TYPE_S       1
#define LAT_TYPE_HX      2
#define LAT_TYPE_HY      3
#define LAT_TYPE_CLU     4
#define LAT_TYPE_RND     5
#define LAT_TYPE_INFS    6
#define LAT_TYPE_INFHY   7
#define LAT_TYPE_INFHX   8
#define LAT_TYPE_ZSTACK  9
#define LAT_TYPE_CUBOID  11
#define LAT_TYPE_XPRISM  12
#define LAT_TYPE_YPRISM  13
#define LAT_TYPE_XTRIAG  14

enum block_LAT {
  LAT_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  LAT_PTR_UNI,
  LAT_OPTIONS,
  LAT_TYPE,
  LAT_ORIG_X0,
  LAT_ORIG_Y0,
  LAT_ORIG_Z0,
  LAT_PITCH,
  LAT_PITCHX,
  LAT_PITCHY,
  LAT_PITCHZ,
  LAT_NX,
  LAT_NY,
  LAT_NZ,
  LAT_NTOT,
  LAT_N_RINGS,
  LAT_PTR_FILL,
  LAT_PTR_Z,
  LAT_COL_CELL_IDX,
  LAT_PTR_TRANS,
  LAT_BLOCK_SIZE
};

enum block_RING {
  RING_N_SEC = LIST_DATA_SIZE,
  RING_RAD,
  RING_RLIM,
  RING_TILT,
  RING_PTR_FILL,
  RING_BLOCK_SIZE
};

/*****************************************************************************/

/***** Depletion history *****************************************************/

/* Depletion step types */

#define DEP_STEP_BU_STEP   1
#define DEP_STEP_BU_TOT    2
#define DEP_STEP_DAY_STEP  3
#define DEP_STEP_DAY_TOT   4
#define DEP_STEP_DEC_STEP  5
#define DEP_STEP_DEC_TOT   6
#define DEP_STEP_ACT_STEP  7
#define DEP_STEP_ACT_TOT   8

/* predictor and corrector types available for burnup calculations (AIs) */

#define PRED_TYPE_CONSTANT   10
#define PRED_TYPE_LINEAR     11
#define CORR_TYPE_NONE       19
#define CORR_TYPE_CONSTANT   20
#define CORR_TYPE_LINEAR     21
#define CORR_TYPE_QUADRATIC  22

/* NOTE: predictor =/= the last corrector iteration, keep as NO on pred. steps*/

/* the types */

#define CI_TYPE_NONE                   -1
#define CI_TYPE_INNER                   0
#define CI_TYPE_OUTER                   1

/* inner iteration means that pEOS flux is iterated as in Dufek's method,
i.e., using backwards constant extrapolation, after which the final round
uses the selected corrector scheme. Outer iteration means that each
iteration uses the selected corrector scheme. Default is OUTER with MAXI=1
which results in the old (no iteration) behavior. (AIs) */


enum block_DEP_HIS {
  DEP_HIS_STEP_TYPE = LIST_DATA_SIZE + PARAM_N_COMMON,
  DEP_HIS_N_STEPS,
  DEP_HIS_PTR_STEPS,
  DEP_HIS_PTR_NORM,
  DEP_HIS_PRED_TYPE,
  DEP_HIS_PRED_NSS,
  DEP_HIS_CORR_TYPE,
  DEP_HIS_CORR_NSS,
  DEP_HIS_PTR_REPROC,
  DEP_HIS_PTR_BRANCH,
  DEP_HIS_BLOCK_SIZE
};

/*****************************************************************************/

/***** Source array **********************************************************/

enum block_SRC {
  SRC_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  SRC_TYPE,
  SRC_WGT,
  SRC_E,
  SRC_PTR_XSDATA,
  SRC_PTR_REA,
  SRC_PTR_MAT,
  SRC_PTR_CELL,
  SRC_PTR_UNIV,
  SRC_PTR_EBINS,
  SRC_PTR_SURF,
  SRC_SURF_SIDE,
  SRC_X0,
  SRC_Y0,
  SRC_Z0,
  SRC_U0,
  SRC_V0,
  SRC_W0,
  SRC_XMIN,
  SRC_XMAX,
  SRC_YMIN,
  SRC_YMAX,
  SRC_ZMIN,
  SRC_ZMAX,
  SRC_RMIN,
  SRC_RMAX,
  SRC_TMIN,
  SRC_TMAX,
  SRC_PTR_RAD_SRC_MAT,
  SRC_RAD_SRC_MODE,
  SRC_READ_FILE_TYPE,
  SRC_READ_PTR_FILE,
  SRC_READ_PTR_BUF,
  SRC_READ_BUF_SZ,
  SRC_READ_BUF_PTS,
  SRC_READ_BUF_IDX,
  SRC_READ_FILE_POS,
  SRC_PTR_USR,
  SRC_PTR_PLASMA_SRC,
  SRC_READ_BINARY,
  SRC_BLOCK_SIZE
};

/* Source energy bin */

enum block_SRC_EBIN {
  SRC_EBIN_NE = LIST_DATA_SIZE,
  SRC_EBIN_INTT,
  SRC_EBIN_PTR_E,
  SRC_EBIN_PTR_PDF,
  SRC_EBIN_PTR_CDF,
  SRC_EBIN_BLOCK_SIZE
};

/* Source buffer entry (toi ei oo linkitetty lista) */

enum block_SRC_BUF {
  SRC_BUF_X,
  SRC_BUF_Y,
  SRC_BUF_Z,
  SRC_BUF_U,
  SRC_BUF_V,
  SRC_BUF_W,
  SRC_BUF_E,
  SRC_BUF_WGT,
  SRC_BUF_T,
  SRC_BUF_BLOCK_SIZE
};

/* User-defined routine */

enum block_SRC_USR {  SRC_USR_NP = LIST_DATA_SIZE,
  SRC_USR_PTR_PARAMS,
  SRC_USR_BLOCK_SIZE
};

/* Decay source */

enum block_SRC_DECCAY {
  SRC_DECCAY_IDX = LIST_DATA_SIZE,
  SRC_DECCAY_PTR_NUCLIDE,
  SRC_DECCAY_PTR_SPEC,
  SRC_DECCAY_I,
  SRC_DECCAY_CUM_P,
  SRC_DECCAY_WGT,
  SRC_DECCAY_BLOCK_SIZE
};

/* Fusion plasma source (only thermal included) */

enum block_SRC_PLASMA {
  SRC_PLASMA_NTOT = LIST_DATA_SIZE,
  SRC_PLASMA_X0,
  SRC_PLASMA_Y0,
  SRC_PLASMA_CO,
  SRC_PLASMA_XYB,
  SRC_PLASMA_PTR_XB,
  SRC_PLASMA_PTR_YB,
  SRC_PLASMA_N_ISO,
  SRC_PLASMA_PTR_PHI,
  SRC_PLASMA_PTR_P_ISO,
  SRC_PLASMA_REACTIONS,
  SRC_PLASMA_PTR_REACT,
  SRC_PLASMA_DATA_SIZE,
  SRC_PLASMA_BLOCK_SIZE
};

enum block_SRC_PLASMA_REA {
  SRC_PLASMA_REA_PROB = LIST_DATA_SIZE,
  SRC_PLASMA_REA_T,
  SRC_PLASMA_REA_N_E,
  SRC_PLASMA_REA_PTR_E,
  SRC_PLASMA_REA_PTR_P_E,
  SRC_PLASMA_REA_PTR_GEOM,
  SRC_PLASMA_REA_BLOCK_SIZE
};

enum block_SRC_PLASMA_REA_GEOM {
/* RHO-THETA coordinate system */

  SRC_PLASMA_REA_N_RHO = LIST_DATA_SIZE,
  SRC_PLASMA_REA_PTR_RHO,
  SRC_PLASMA_REA_PTR_P_RHO,
  SRC_PLASMA_REA_XYB,
  SRC_PLASMA_REA_PTR_XB,
  SRC_PLASMA_REA_PTR_YB,
  SRC_PLASMA_REA_PTR_P_XY,

/* RZ coordinate system */

  SRC_PLASMA_REA_N_RZ,
  SRC_PLASMA_REA_PTR_R,
  SRC_PLASMA_REA_PTR_Z,
  SRC_PLASMA_REA_PTR_P_RZ,
  SRC_PLASMA_REA_N_PHI,
  SRC_PLASMA_REA_PTR_PHI,
  SRC_PLASMA_REA_PTR_P_PHI,
  SRC_PLASMA_REA_GEOM_BLOCK_SIZE
};

/*****************************************************************************/

/***** Detector array ********************************************************/

enum block_DET {
  DET_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  DET_TYPE,
  DET_PTR_EGRID,
  DET_PTR_RBINS,
  DET_PTR_UBINS,
  DET_PTR_LBINS,
  DET_PTR_MBINS,
  DET_PTR_CBINS,
  DET_PTR_SBINS,
  DET_PTR_ABINS,
  DET_PTR_TME,
  DET_N_EBINS,
  DET_N_UBINS,
  DET_N_CBINS,
  DET_N_MBINS,
  DET_N_LBINS,
  DET_N_RBINS,
  DET_N_TBINS,
  DET_N_TOT_BINS,
  DET_PTR_STAT,
  DET_VOL,
  DET_PTR_MUL,
  DET_PTR_MESH,
  DET_PARTICLE,
  DET_DELAYED_GROUP,
  DET_WRITE_PTR_FILE,
  DET_WRITE_PTR_BUF,
  DET_WRITE_BUF_SZ,
  DET_WRITE_BUF_IDX,
  DET_WRITE_PROB,
  DET_WRITE_HIS,
  DET_SCORE_FISS_REG_ONLY,
  DET_DIRVEC_U,
  DET_DIRVEC_V,
  DET_DIRVEC_W,
  DET_WRITE_BINARY,
  DET_PTR_FLAGGING,
  DET_PTR_FET,
  DET_FET_PTR_PARAMS,
  DET_PTR_SENS_STAT_ARRAY,
  DET_SKIP_FRAC,
  DET_PTR_TRANS,
  DET_BLOCK_SIZE
};

/* Detector flag bin */

enum block_DET_FBIN {
  DET_FBIN_FLAG_NUMBER = LIST_DATA_SIZE,
  DET_FBIN_FLAG_OPTION,
  DET_FBIN_FLAG_AND_LOGIC,
  DET_FBIN_BLOCK_SIZE
};

/* Detector reaction bin */

enum block_DET_RBIN {
  DET_RBIN_PTR_MAT = LIST_DATA_SIZE,
  DET_RBIN_MT,
  DET_RBIN_RFS,
  DET_RBIN_PTR_REA,
  DET_RBIN_VOID_MODE,
  DET_RBIN_PTR_FUN,
  DET_RBIN_ATTN_NP,
  DET_RBIN_ATTN_PTR_E,
  DET_RBIN_ATTN_PTR_F,
  DET_RBIN_CONVERT,
  DET_RBIN_PTR_PULSE_DATA,
  DET_RBIN_PTR_SENS_DIRECT_STAT_ARRAY,
  DET_RBIN_BLOCK_SIZE
};

/* Pulse data for pulse-height detector (PRIVA-array, no LIST_DATA_SIZE) */

enum block_DET_PULSE {
  DET_PULSE_PHOTON_IDX,
  DET_PULSE_EDEP,
  DET_PULSE_WGT,
  DET_PULSE_BLOCK_SIZE
};

/* Detector universe bin */

enum block_DET_UBIN {
  DET_UBIN_PTR_UNI = LIST_DATA_SIZE,
  DET_UBIN_BLOCK_SIZE
};

/* Detector lattice bin */

enum block_DET_LBIN {
  DET_LBIN_PTR_LAT = LIST_DATA_SIZE,
  DET_LBIN_TYPE,
  DET_LBIN_BLOCK_SIZE
};

/* Detector material bin */

enum block_DET_MBIN {
  DET_MBIN_PTR_MAT = LIST_DATA_SIZE,
  DET_MBIN_BLOCK_SIZE
};

/* Detector activation bin */

enum block_DET_ABIN {
  DET_ABIN_PTR_MAT = LIST_DATA_SIZE,
  DET_ABIN_FLUX,
  DET_ABIN_VOL,
  DET_ABIN_BLOCK_SIZE
};

/* Detector cell bin */

enum block_DET_CBIN {
  DET_CBIN_PTR_CELL = LIST_DATA_SIZE,
  DET_CBIN_SUPER_CELL,
  DET_CBIN_UMSH_PTR_UMSH,
  DET_CBIN_UMSH_PTR_CELLS,
  DET_CBIN_UMSH_PTR_BINS,
  DET_CBIN_BLOCK_SIZE
};

/* Bins for super-imposed detector */

enum block_DET_SBIN {
  DET_SBIN_TYPE = LIST_DATA_SIZE,
  DET_SBIN_PTR_SURF,
  DET_SBIN_SURF_NORM,
  DET_SBIN_BLOCK_SIZE
};

/* Bins list for material detectors */

enum block_DETBIN {
  DETBIN_PTR_DET = LIST_DATA_SIZE,
  DETBIN_BIN,
  DETBIN_BLOCK_SIZE
};

/*****************************************************************************/

/***** FET's *****************************************************************/

enum block_FET_PARAMS
{
  FET_PARAM_TYPE = LIST_DATA_SIZE,
  FET_PARAM_FET_VOLUME,
  FET_PARAM_PHYS_VOLUME,
  FET_PARAM_CENTER0,
  FET_PARAM_MIN0,
  FET_PARAM_MAX0,
  FET_PARAM_NDEG0,
  FET_PARAM_NCOEF0,
  FET_PARAM_CENTER1,
  FET_PARAM_MIN1,
  FET_PARAM_MAX1,
  FET_PARAM_NDEG1,
  FET_PARAM_NCOEF1,
  FET_PARAM_CENTER2,
  FET_PARAM_MIN2,
  FET_PARAM_MAX2,
  FET_PARAM_NDEG2,
  FET_PARAM_NCOEF2,
  FET_PARAM_NCOEF_TOTAL,
  FET_PARAM_CALC_ARRAY_SIZE0,
  FET_PARAM_CALC_ARRAY_PTR0,
  FET_PARAM_CALC_ARRAY_SIZE1,
  FET_PARAM_CALC_ARRAY_PTR1,
  FET_PARAM_CALC_ARRAY_SIZE2,
  FET_PARAM_CALC_ARRAY_PTR2,
  FET_PARAM_UNC_ARRAY_SIZE,
  FET_PARAM_UNC_ARRAY_PTR,
  FET_PARAMS_SIZE
};

/* Which parameters can be copied, i.e. are not pointers or array sizes? */

#define FET_PARAMS_COPY_START         FET_PARAM_TYPE
#define FET_PARAMS_COPY_END           FET_PARAM_NCOEF2

/* For code readability, make descriptive names for the different FET types */
/* Cartesian [FET_TYPE_CARTESIAN] */

#define FET_CART_MIN_X                FET_PARAM_MIN0
#define FET_CART_MAX_X                FET_PARAM_MAX0
#define FET_CART_ORDER_X              FET_PARAM_NDEG0
#define FET_CART_NCOEF_X              FET_PARAM_NCOEF0
#define FET_CART_CALC_ARRAY_SIZE_X    FET_PARAM_CALC_ARRAY_SIZE0
#define FET_CART_CALC_ARRAY_PTR_X     FET_PARAM_CALC_ARRAY_PTR0
#define FET_CART_MIN_Y                FET_PARAM_MIN1
#define FET_CART_MAX_Y                FET_PARAM_MAX1
#define FET_CART_ORDER_Y              FET_PARAM_NDEG1
#define FET_CART_NCOEF_Y              FET_PARAM_NCOEF1
#define FET_CART_CALC_ARRAY_SIZE_Y    FET_PARAM_CALC_ARRAY_SIZE1
#define FET_CART_CALC_ARRAY_PTR_Y     FET_PARAM_CALC_ARRAY_PTR1
#define FET_CART_MIN_Z                FET_PARAM_MIN2
#define FET_CART_MAX_Z                FET_PARAM_MAX2
#define FET_CART_ORDER_Z              FET_PARAM_NDEG2
#define FET_CART_NCOEF_Z              FET_PARAM_NCOEF2
#define FET_CART_CALC_ARRAY_SIZE_Z    FET_PARAM_CALC_ARRAY_SIZE2
#define FET_CART_CALC_ARRAY_PTR_Z     FET_PARAM_CALC_ARRAY_PTR2
/* Cylindrical [FET_TYPE_CYLINDRICAL] *//*
#define FET_CART_MIN_R                FET_PARAM_MIN0    Currently unused until if/when annular Zernike are implemented */
#define FET_CYL_MAX_R                 FET_PARAM_MAX0
#define FET_CYL_ORDER_R               FET_PARAM_NDEG0
#define FET_CYL_NCOEF_R               FET_PARAM_NCOEF0
#define FET_CYL_CALC_ARRAY_SIZE_R     FET_PARAM_CALC_ARRAY_SIZE0
#define FET_CYL_CALC_ARRAY_PTR_R      FET_PARAM_CALC_ARRAY_PTR0
#define FET_CYL_MIN_A                 FET_PARAM_MIN1
#define FET_CYL_MAX_A                 FET_PARAM_MAX1
#define FET_CYL_ORDER_A               FET_PARAM_NDEG1
#define FET_CYL_NCOEF_A               FET_PARAM_NCOEF1
#define FET_CYL_CALC_ARRAY_SIZE_A     FET_PARAM_CALC_ARRAY_SIZE1
#define FET_CYL_CALC_ARRAY_PTR_A      FET_PARAM_CALC_ARRAY_PTR1
#define FET_CYL_ORIENTATION_A         FET_PARAM_MIN2
#define FET_CYL_CENTER_A0             FET_PARAM_CENTER0
#define FET_CYL_CENTER_A1             FET_PARAM_CENTER1

/*****************************************************************************/

/***** User-defined energy grid **********************************************/

enum block_ENE {
  ENE_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  ENE_TYPE,
  ENE_NB,
  ENE_EMIN,
  ENE_EMAX,
  ENE_PTR_GRID,
  ENE_PTR_PREDEF,
  ENE_BLOCK_SIZE
};

/*****************************************************************************/

/***** User-defined time binning *********************************************/

enum block_TME {
  TME_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  TME_TYPE,
  TME_NB,
  TME_TMIN,
  TME_TMAX,
  TME_PTR_BINS,
  TME_BLOCK_SIZE
};

/*****************************************************************************/

/***** Importances ***********************************************************/

enum block_IMP {
  IMP_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  IMP_PTR_CELL,
  IMP_PTR_MAT,
  IMP_PTR_UNI,
  IMP_I,
  IMP_BLOCK_SIZE
};

/*****************************************************************************/

/***** User-defined response function ****************************************/

enum block_FUN {
  FUN_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  FUN_TYPE,
  FUN_INT,
  FUN_NE,
  FUN_PTR_E,
  FUN_PTR_F,
  FUN_BLOCK_SIZE
};

/*****************************************************************************/

/***** Weight window array ***************************************************/

enum block_WWD {
  WWD_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  WWD_NORM_FACT,
  WWD_NORM_X,
  WWD_NORM_Y,
  WWD_NORM_Z,
  WWD_NORM_E,
  WWD_MESH_MIN,
  WWD_MESH_MAX,
  WWD_PTR_MESH,
  WWD_PTR_MESH_DATA,
  WWD_MULT,
  WWD_POW,
  WWD_NE,
  WWD_PTR_ERG,
  WWD_PTR_FNAME,
  WWD_TYPE,
  WWD_PARTICLE_TYPE,
  WWD_PTR_SRC_IMP_DIS,
  WWD_SRC_BIAS,
  WWD_BOUNDS_TYPE,
  WWD_N_ITER,
  WWD_PTR_ITER,
  WWD_PTR_RMX,
  WWD_PTR_SUM_SRC_IMP,
  WWD_LIM_MIN,
  WWD_LIM_MAX,
  WWD_SMOOTH_F0,
  WWD_SMOOTH_F1,
  WWD_BLOCK_SIZE
};

/* Mesh cell */

enum block_WWD_MESH {
  WWD_MESH_SRC_IMP = LIST_DATA_SIZE,
  WWD_MESH_IMP,
  WWD_MESH_PTR_IMP,
  WWD_MESH_IDX,
  WWD_MESH_NMAX,
  WWD_MESH_PTR_FACES,
  WWD_MESH_PTR_BOUNDS,
  WWD_MESH_BLOCK_SIZE
};

/* Iterations */

enum block_WWD_ITER {
  WWD_ITER_PTR_RMX = LIST_DATA_SIZE,
  WWD_ITER_TYPE,
  WWD_ITER_DF,
  WWD_ITER_SPLIT_NX,
  WWD_ITER_SPLIT_NY,
  WWD_ITER_SPLIT_NZ,
  WWD_ITER_SPLIT_XMIN,
  WWD_ITER_SPLIT_YMIN,
  WWD_ITER_SPLIT_ZMIN,
  WWD_ITER_SPLIT_LOOPS,
  WWD_ITER_SPLIT_TRACKS,
  WWD_ITER_SPLIT_PTR_DENS,
  WWD_ITER_SPLIT_MFP_CRIT,
  WWD_ITER_SPLIT_IMP_CRIT,
  WWD_ITER_SPLIT_MAX_NEIGH,
  WWD_ITER_BLOCK_SIZE
};

/* Split criteria by density */

enum block_WWD_ITER_SPLIT_DENS {
  WWD_ITER_SPLIT_DENS_RHO = LIST_DATA_SIZE,
  WWD_ITER_SPLIT_DENS_XMIN,
  WWD_ITER_SPLIT_DENS_YMIN,
  WWD_ITER_SPLIT_DENS_ZMIN,
  WWD_ITER_SPLIT_DENS_BLOCK_SIZE
};

/*****************************************************************************/

/***** Response matrix array *************************************************/

enum block_RMX {
  RMX_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  RMX_PARTICLE_TYPE,
  RMX_PTR_MESH,
  RMX_PTR_MESH_DATA,
  RMX_CONV,
  RMX_PTR_ITER,
  RMX_N_ITER,
  RMX_PTR_EGRID,
  RMX_NG,
  RMX_PTR_DET,
  RMX_MODE,
  RMX_CONVG_SUBMESH_NX,
  RMX_CONVG_SUBMESH_NY,
  RMX_CONVG_SUBMESH_NZ,
  RMX_CONVG_SUBMESH_P,
  RMX_CONVG_PREV_KEFF,
  RMX_USE_TLE,
  RMX_FROM_FILE,
  RMX_PTR_EVENT_BUFF, 
  RMX_BLOCK_SIZE
};

/* Detector */

enum block_RMX_DET {
  RMX_DET_PTR_DET = LIST_DATA_SIZE,
  RMX_DET_WGT,
  RMX_DET_MC_RES_IN_CURR,
  RMX_DET_MC_RES_SRCC,
  RMX_DET_MC_RES_TOT,
  RMX_DET_MC_RES_SCORE_N,
  RMX_DET_COEF_FWD_RES,
  RMX_DET_COEF_ADJ_RES,
  RMX_DET_COEF_DIR_SRCC_RES,
  RMX_DET_FWD_CHK,
  RMX_DET_FWD_PREV,
  RMX_DET_PTR_DET0,
  RMX_DET_BLOCK_SIZE
};

/* Mesh cell */

enum block_RMX_CELL {
  RMX_CELL_IDX = LIST_DATA_SIZE,
  RMX_CELL_PTR_MESH,
  RMX_CELL_MESH_IDX,
  RMX_CELL_PTR_BOUNDS,
  RMX_CELL_MTX_SIZE,
  RMX_CELL_MTX_ADA_PROC,
  RMX_CELL_EMPTY,
  RMX_CELL_RVOL,
  RMX_CELL_MC_CURR_NET_IN,
  RMX_CELL_MC_CURR_NET_OUT,
  RMX_CELL_MC_CURR_THROUGH,
  RMX_CELL_MC_CURR_SRCC_OUT,
  RMX_CELL_MC_WWG_CURR0,
  RMX_CELL_MC_WWG_CURR1,
  RMX_CELL_MC_WWG_SRC0,
  RMX_CELL_MC_WWG_SRC1,
  RMX_CELL_MC_SRCC_TOT,
  RMX_CELL_MC_SURF_FF,
  RMX_CELL_MC_SRC_FF,
  RMX_CELL_MC_MFP_TOTRR0,
  RMX_CELL_MC_MFP_FLX0,
  RMX_CELL_MC_MFP_TOTRR1,
  RMX_CELL_MC_MFP_FLX1,
  RMX_CELL_COEF_FWD_SRCC,
  RMX_CELL_COEF_FWD_TRANS_MTX,
  RMX_CELL_COEF_ADJ_SRCC,
  RMX_CELL_COEF_ADJ_TRANS_MTX,
  RMX_CELL_COEF_SURF_FF,
  RMX_CELL_COEF_SRC_FF,
  RMX_CELL_WRK_IN_CURR,
  RMX_CELL_WRK_OUT_CURR,
  RMX_CELL_FWD_SOL_IN_CURR,
  RMX_CELL_ADJ_SOL_IN_CURR,
  RMX_CELL_ADJ_SOL_OUT_CURR,
  RMX_CELL_TMP_SRC,
  RMX_CELL_IMP_SRC,
  RMX_CELL_IMP_SRC_KEEP,
  RMX_CELL_IMP_CURR,
  RMX_CELL_IMP_CURR_KEEP,
  RMX_CELL_PTR_DET,
  RMX_CELL_SRC_PROB,
  RMX_CELL_PTR_SUBMESH,
  RMX_CELL_PTR_SUBMESH_SAMPLE,
  RMX_CELL_PTR_SPLIT,
  RMX_CELL_SPLIT_FLAG,
  RMX_CELL_BLOCK_SIZE
};

/* Pointers to neighbour cells */

enum block_RMX_CELL_BOUND {
  RMX_CELL_BOUND_PTR_CELL = LIST_DATA_SIZE,
  RMX_CELL_BOUND_FWD_IDX,
  RMX_CELL_BOUND_ADJ_IDX,
  RMX_CELL_BOUND_BLOCK_SIZE
};

/* Sampling from sub-mesh */

enum block_RMX_SUBMESH_SAMPLE {
  RMX_SUBMESH_SAMPLE_IDX = LIST_DATA_SIZE,
  RMX_SUBMESH_SAMPLE_P,
  RMX_SUBMESH_SAMPLE_BLOCK_SIZE
};

/*****************************************************************************/

/***** Geometry levels *******************************************************/

/* Data stored in common array */

enum block_LVL {
  LVL_NUMBER = LIST_DATA_SIZE,
  LVL_PTR_PRIVATE_DATA,
  LVL_MAX_REGIONS,
  LVL_CUM_MAX_REGIONS,
  LVL_ZONE_IDX_MULT,
  LVL_BLOCK_SIZE
};

/* Data stored in private array */

enum block_LVL_PRIV {
  LVL_PRIV_TYPE,
  LVL_PRIV_PTR_NEST_REG,
  LVL_PRIV_PTR_LAT,
  LVL_PRIV_PTR_CELL,
  LVL_PRIV_PTR_PBED,
  LVL_PRIV_PTR_PEBBLE,
  LVL_PRIV_PTR_UMSH,
  LVL_PRIV_PTR_STL,
  LVL_PRIV_X,
  LVL_PRIV_Y,
  LVL_PRIV_Z,
  LVL_PRIV_U,
  LVL_PRIV_V,
  LVL_PRIV_W,
  LVL_PRIV_LAST,
  LVL_PRIV_LAT_SURF_TYPE,
  LVL_PRIV_LAT_SURF_NP,
  LVL_PRIV_LAT_SURF_C0,
  LVL_PRIV_LAT_SURF_C1,
  LVL_PRIV_LAT_SURF_C2,
  LVL_PRIV_LAT_SURF_C3,
  LVL_PRIV_LAT_SURF_C4,
  LVL_PRIV_LAT_SURF_C5,
  LVL_PRIV_PTR_UNIV,
  LVL_PRIV_ZONE_IDX,
  LVL_PRIV_PTR_DIV,
  LVL_PRIV_BLOCK_SIZE
};

/*****************************************************************************/

/***** Score block ***********************************************************/

enum block_SCORE {
  SCORE_PTR_NAME = LIST_DATA_SIZE,
  SCORE_DIM,
  SCORE_PTR_NMAX,
  SCORE_PTR_DATA,
  SCORE_PTR_BUF,
  SCORE_STAT_SIZE,
  SCORE_PTR_HIS,
  SCORE_BLOCK_SIZE
};

/*****************************************************************************/

/***** Universe **************************************************************/

/* Universe types */

#define UNIVERSE_TYPE_CELL     1
#define UNIVERSE_TYPE_NEST     2
#define UNIVERSE_TYPE_LATTICE  3
#define UNIVERSE_TYPE_PBED     4
#define UNIVERSE_TYPE_SUPER    5
#define UNIVERSE_TYPE_UMSH     6
#define UNIVERSE_TYPE_STL      7

/* Data block */

enum block_UNIVERSE {
  UNIVERSE_PTR_NAME = LIST_DATA_SIZE,
  UNIVERSE_OPTIONS,
  UNIVERSE_TYPE,
  UNIVERSE_PTR_CELL_LIST,
  UNIVERSE_PTR_SRC_CELL_LIST,
  UNIVERSE_PTR_NEST,
  UNIVERSE_PTR_LAT,
  UNIVERSE_PTR_PBED,
  UNIVERSE_PTR_UMSH,
  UNIVERSE_PTR_STL,
  UNIVERSE_PTR_TRANS,
  UNIVERSE_PTR_SYM,
  UNIVERSE_MINX,
  UNIVERSE_MAXX,
  UNIVERSE_MINY,
  UNIVERSE_MAXY,
  UNIVERSE_MINZ,
  UNIVERSE_MAXZ,
  UNIVERSE_DIM,
  UNIVERSE_COL_COUNT,
  UNIVERSE_PTR_GCU,
  UNIVERSE_LEVEL,
  UNIVERSE_PTR_PRIVA_X,
  UNIVERSE_PTR_PRIVA_Y,
  UNIVERSE_PTR_PRIVA_Z,
  UNIVERSE_PTR_PRIVA_T,
  UNIVERSE_PTR_PREV_REG,
  UNIVERSE_PTR_SRC_REG,
  UNIVERSE_PTR_NEAREST_SURF,
  UNIVERSE_FMTX_IDX,
  UNIVERSE_PTR_IFC_FUEP,
  UNIVERSE_GCU_IDX,
  UNIVERSE_WARN_MULTI_LVL,
  UNIVERSE_PTR_CELL_MESH,
  UNIVERSE_PTR_NEXT_CELL,
  UNIVERSE_PTR_SEARCH_MESH,
  UNIVERSE_PTR_SEARCH_MESH_DATA,
  UNIVERSE_BLOCK_SIZE
};

/*****************************************************************************/

/***** Particle (neutron / photon) *******************************************/

/* Data block */

enum block_PARTICLE {
  PARTICLE_HISTORY_IDX = LIST_DATA_SIZE,
  PARTICLE_RNG_IDX,
  PARTICLE_TYPE,
  PARTICLE_X,
  PARTICLE_Y,
  PARTICLE_Z,
  PARTICLE_U,
  PARTICLE_V,
  PARTICLE_W,
  PARTICLE_E,
  PARTICLE_LE,
  PARTICLE_WGT,
  PARTICLE_T0,
  PARTICLE_T,
  PARTICLE_TD,
  PARTICLE_TT,
  PARTICLE_FMTX_IDX,
  PARTICLE_PTR_GCU,
  PARTICLE_PTR_MAT,
  PARTICLE_MPI_ID,
  PARTICLE_GEN_IDX,
  PARTICLE_DN_GROUP,
  PARTICLE_DN_LAMBDA,
  PARTICLE_PE_AR_IDX,

#ifdef OLD_IFP

  PARTICLE_PTR_FISS_PROG,

#endif

  PARTICLE_ICM_PTR_ICM,
  PARTICLE_ICM_IDX,
  PARTICLE_ICM_EVENT_IDX,
  PARTICLE_ICM_MUA,
  PARTICLE_ICM_MUS,
  PARTICLE_ICM_G,
  PARTICLE_ICM_WGT,
  PARTICLE_ALB_PTR_GCU,
  PARTICLE_ALB_SURF_IDX,
  PARTICLE_ALB_G,
  PARTICLE_PTR_EVENTS,
  PARTICLE_COL_IDX,
  PARTICLE_MULTIPLICITY,
  PARTICLE_DET_FLAGS,
  PARTICLE_PHOTON_TYPE,
  PARTICLE_NA_COLL,
  PARTICLE_PTR_SENS_EBLOCK,
  PARTICLE_EIG_IDX,
  PARTICLE_PREV_I,
  PARTICLE_EDEP_RENORM,
  PARTICLE_DD_TRACK_MODE,
  PARTICLE_BLOCK_SIZE	
};

/* Fission progenies */

#ifdef OLD_IFP

enum block_FISS_PROG {
  FISS_PROG_DN_GROUP = LIST_DATA_SIZE,
  FISS_PROG_LIFETIME,
  FISS_PROG_LAMBDA,
  FISS_PROG_NA_COLL,
  FISS_PROG_BLOCK_SIZE
};

#endif

/*****************************************************************************/

/***** Event array ***********************************************************/

enum block_EVENT {
/* Common to all */

  EVENT_HIS_COUNT = LIFO_LIST_DATA_SIZE,
  EVENT_TYPE,

/* Fissions */

  EVENT_DN_GROUP,
  EVENT_LIFETIME,
  EVENT_LAMBDA,

/* Collision points */

  EVENT_X,
  EVENT_Y,
  EVENT_Z,

/* Energy and time */

  EVENT_E,
  EVENT_T,

/* Weight and flux */

  EVENT_WGT,
  EVENT_FLX,

/* Material */

  EVENT_PTR_MAT,

/* Sensitivity label for event */

  EVENT_LABEL,

/* Number of accepted collisions in void fraction material */

  EVENT_ACCEPTED_COLLS,

/* Event value */

  EVENT_VAL,
  EVENT_BLOCK_SIZE
};

/*****************************************************************************/

/***** Mesh plot *************************************************************/

enum block_MPL {
  MPL_NDIST = LIST_DATA_SIZE + PARAM_N_COMMON,
  MPL_DIV,
  MPL_AX,
  MPL_NX,
  MPL_NY,
  MPL_SYM,
  MPL_XMIN,
  MPL_XMAX,
  MPL_YMIN,
  MPL_YMAX,
  MPL_ZMIN,
  MPL_ZMAX,
  MPL_MIN1,
  MPL_MAX1,
  MPL_MIN2,
  MPL_MAX2,
  MPL_PTR_VAL1,
  MPL_PTR_VAL2,
  MPL_PTR_DIV1,
  MPL_PTR_DIV2,
  MPL_PTR_FNAME,
  MPL_TYPE,
  MPL_COLMAP,
  MPL_PTR_DET,
  MPL_COLOR_SCALE,
  MPL_BLOCK_SIZE
};

/*****************************************************************************/

/***** FINIX block ***********************************************************/

enum block_FINIX {
  FINIX_IDX = LIST_DATA_SIZE + PARAM_N_COMMON,
  FINIX_PTR_UNI,
  FINIX_NZ_POW,
  FINIX_NR_POW,
  FINIX_PTR_AX,
  FINIX_PTR_POWER,
  FINIX_NZ,
  FINIX_NR_FUEL,
  FINIX_NR_CLAD,
  FINIX_ZMIN,
  FINIX_ZMAX,
  FINIX_RMIN,
  FINIX_RMAX,
  FINIX_RODTYPE,
  FINIX_PTR_ROD,
  FINIX_PTR_BC,
  FINIX_PTR_SCENARIO,
  FINIX_PTR_RESULTS,
  FINIX_PTR_RESULTS_BOI,
  FINIX_PTR_PDEN,
  FINIX_PTR_BU,
  FINIX_PTR_PARAMS,
  FINIX_PTR_BCOND,
  FINIX_PTR_SRESULTS,
  FINIX_PTR_VRESULTS,
  FINIX_PTR_OPTIONS,
  FINIX_BCTYPE,
  FINIX_PTR_UNI_NAME,
  FINIX_IFC_NREG,
  FINIX_PTR_NEST,
  FINIX_PTR_LHR,
  FINIX_CMIN,
  FINIX_CMAX,
  FINIX_N_PIN,
  FINIX_PTR_FUEP,
  FINIX_PTR_IFC,
  FINIX_PTR_IFC_FNAME,
  FINIX_PTR_RODNAME,
  FINIX_PTR_OPTINAME,
  FINIX_PTR_SCENNAME,
  FINIX_PTR_POWMSH,
  FINIX_N_RODS,
  FINIX_BLOCK_SIZE
};

/* List of FINIX axial segments */

enum block_FINIX_AX {
  FINIX_AX_IDX = LIST_DATA_SIZE,
  FINIX_AX_ZMIN,
  FINIX_AX_ZMAX,
  FINIX_AX_CLADT,
  FINIX_AX_COOLT,
  FINIX_AX_HTCOE,
  FINIX_AX_HFLUX,
  FINIX_AX_BLOCK_SIZE
};

/*****************************************************************************/

/***** Normalization *********************************************************/

/* NOTE: ton rakenteen yli loopataan setnormalization.c:ss√§ */

enum block_NORM {
  NORM_POWER = LIST_DATA_SIZE + PARAM_N_COMMON,
  NORM_POWDENS,
  NORM_GENRATE,
  NORM_FISSRATE,
  NORM_ABSRATE,
  NORM_LOSSRATE,
  NORM_FLUX,
  NORM_SRCRATE,
  NORM_SFRATE,
  NORM_PTR_MAT,
  NORM_PTR_FISSRATE,
  NORM_PTR_NSF,
  NORM_PTR_FISSE,
  NORM_PTR_NEUTRON_FLUX,
  NORM_PTR_PHOTON_FLUX,
  NORM_PTR_PHOTON_HEATRATE,
  NORM_ACTI_ZAI,
  NORM_ACTI_A,
  NORM_BLOCK_SIZE
};

/*****************************************************************************/

/***** Mesh ******************************************************************/

enum block_MESH {
  MESH_TYPE = LIST_DATA_SIZE,
  MESH_CONTENT,
  MESH_CONTENT_DATA_TYPE,
  MESH_N0,
  MESH_N1,
  MESH_N2,
  MESH_MIN0,
  MESH_MAX0,
  MESH_MIN1,
  MESH_MAX1,
  MESH_MIN2,
  MESH_MAX2,
  MESH_PTR_RES2,
  MESH_PTR_DATA,
  MESH_PTR_PTR,
  MESH_ORTHO_PTR_XLIM,
  MESH_ORTHO_PTR_YLIM,
  MESH_ORTHO_PTR_ZLIM,
  MESH_ADA_SPLIT,
  MESH_ADA_PTR_SZ,
  MESH_LOCAL_COORDS,
  MESH_PTR_NAME,
  MESH_PREV_COL_IDX,
  MESH_BLOCK_SIZE
};

/*****************************************************************************/

/***** Core power distribution ***********************************************/

enum block_CPD {
  CPD_PTR_LAT = LIST_DATA_SIZE,
  CPD_COL_COUNT,
  CPD_BLOCK_SIZE
};

/*****************************************************************************/

/***** Fission matrix ********************************************************/

enum block_FMTX {
  FMTX_PTR_MTX = LIST_DATA_SIZE,
  FMTX_PTR_SRC,
  FMTX_SIZE,
  FMTX_PTR_MAT,
  FMTX_PTR_UNI,
  FMTX_LVL,
  FMTX_PTR_MESH,
  FMTX_BLOCK_SIZE
};

/*****************************************************************************/

/***** Material divider for burnup calculation *******************************/

enum block_DIV {
  DIV_PTR_MAT = LIST_DATA_SIZE + PARAM_N_COMMON,
  DIV_NX,
  DIV_XMIN,
  DIV_XMAX,
  DIV_NY,
  DIV_YMIN,
  DIV_YMAX,
  DIV_NZ,
  DIV_ZMIN,
  DIV_ZMAX,
  DIV_NRAD,
  DIV_RMIN,
  DIV_RMAX,
  DIV_NSEG,
  DIV_SEG0,
  DIV_SEP,
  DIV_SEP_LVL,
  DIV_PTR_MAT_LIST,
  DIV_OUTPUT_FLAG,
  DIV_LVL_MAX,
  DIV_LIMS_CHECK,
  DIV_PTR_SEARCH_LIST,
  DIV_SEARCH_LIST_SZ,
  DIV_BLOCK_SIZE
};

/* Divisor material lists */

enum block_DIV_MAT_LIST {
  DIV_MAT_LIST_ZONE_IDX = LIST_DATA_SIZE,
  DIV_MAT_LIST_PTR_UNIV,
  DIV_MAT_LIST_PTR_REG,
  DIV_MAT_LIST_BLOCK_SIZE
};

/*****************************************************************************/

/***** Universe symmetry *****************************************************/

enum block_SYMMETRY {
  SYMMETRY_PTR_UNI = LIST_DATA_SIZE + PARAM_N_COMMON,
  SYMMETRY_AXIS,
  SYMMETRY_BC,
  SYMMETRY_THETA0,
  SYMMETRY_ROT,
  SYMMETRY_X0,
  SYMMETRY_Y0,
  SYMMETRY_SYM,
  SYMMETRY_COORD_TRANS,
  SYMMETRY_BLOCK_SIZE
};

/*****************************************************************************/

/***** Reprocessing **********************************************************/

enum block_REPROC {
  REPROC_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  REPROC_OPTIONS,
  REPROC_PTR_SWAP_LIST,
  REPROC_PTR_RPL_LIST,
  REPROC_PTR_REM_LIST,
  REPROC_PTR_CON_LIST,
  REPROC_BLOCK_SIZE
};

/* Swap list */

enum block_REPROC_SWAP {
  REPROC_SWAP_PTR_UNI1 = LIST_DATA_SIZE,
  REPROC_SWAP_PTR_UNI2,
  REPROC_SWAP_BLOCK_SIZE
};

/* Replace list */

enum block_REPROC_RPL {
  REPROC_RPL_PTR_UNI1 = LIST_DATA_SIZE,
  REPROC_RPL_PTR_UNI2,
  REPROC_RPL_BLOCK_SIZE
};

/* Removal list */

enum block_REPROC_REM {
  REPROC_REM_PTR_MAT1 = LIST_DATA_SIZE,
  REPROC_REM_PTR_MAT2,
  REPROC_REM_BLOCK_SIZE
};

/* Continuous reprocessing */

enum block_REPROC_CON {
  REPROC_CON_PTR_MAT1 = LIST_DATA_SIZE,
  REPROC_CON_PTR_MAT2,
  REPROC_CON_PTR_MFLOW,
  REPROC_CON_MODE,
  REPROC_CON_PTR_REP,
  REPROC_CON_BLOCK_SIZE
};

/*****************************************************************************/

/***** Nuclide mass flow list ************************************************/

enum block_MFLOW {
  MFLOW_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  MFLOW_OPTIONS,
  MFLOW_PTR_DATA,
  MFLOW_BLOCK_SIZE
};

enum block_MFLOW_LIST {
  MFLOW_LIST_ZAI = LIST_DATA_SIZE,
  MFLOW_LIST_RATE,
  MFLOW_LIST_TOT,
  MFLOW_LIST_PTR_ORIG,
  MFLOW_LIST_PTR_ISO0,
  MFLOW_LIST_PTR_ISO1,
  MFLOW_LIST_BLOCK_SIZE
};

/*****************************************************************************/

/***** Nuclide inventory list ************************************************/

enum block_INVENTORY {
  INVENTORY_PTR_ENTRY = LIST_DATA_SIZE,
  INVENTORY_PTR_NAME,
  INVENTORY_ZAI,
  INVENTORY_BLOCK_SIZE
};

/*****************************************************************************/

/***** Assembly discontinuity factors ****************************************/

enum block_ADF {
  ADF_PTR_GCU = LIST_DATA_SIZE + PARAM_N_COMMON,
  ADF_PTR_SURF,
  ADF_NSURF,
  ADF_NCORN,
  ADF_PTR_SURF_AREA,
  ADF_PTR_MID_AREA,
  ADF_PTR_CORN_AREA,
  ADF_VOL,
  ADF_SYM,
  ADF_ENFORCE_REF,
  ADF_BLOCK_SIZE
};

/*****************************************************************************/

/***** Interface current method **********************************************/

enum block_ICM {
  ICM_PTR_ID = LIST_DATA_SIZE + PARAM_N_COMMON,
  ICM_PTR_SURF,
  ICM_PTR_LAT,
  ICM_NP,
  ICM_BREAK_PTR_COUNT,
  ICM_X0,
  ICM_Y0,
  ICM_Z0,

  ICM_RES_CURR0,
  ICM_RES_CC1,
  ICM_RES_CC2,
  ICM_RES_AFLX1,
  ICM_RES_AFLX2,
  ICM_RES_ASRC1,
  ICM_RES_ASRC2,
  ICM_RES_AFISS1,
  ICM_RES_AFISS2,
  ICM_RES_AABS1,
  ICM_RES_AABS2,
  ICM_RES_APOW1,
  ICM_RES_APOW2,
  ICM_RES_LEAK1,
  ICM_RES_LEAK2,
  ICM_RES_PPOW1,
  ICM_RES_PPOW2,
  ICM_RES_PFLX1,
  ICM_RES_PFLX2,
  ICM_BLOCK_SIZE
};

/*****************************************************************************/

/***** Pin power distributions ***********************************************/

enum block_PPW {
  PPW_PTR_GCU = LIST_DATA_SIZE,
  PPW_PTR_LAT,
  PPW_LAT_TYPE,
  PPW_NP,
  PPW_BLOCK_SIZE
};

/*****************************************************************************/

/***** Albedo (group constant) ***********************************************/

enum block_ALB {
  ALB_PTR_GCU = LIST_DATA_SIZE + PARAM_N_COMMON,
  ALB_PTR_SURF,
  ALB_DIR,
  ALB_NSURF,
  ALB_BLOCK_SIZE
};

/*****************************************************************************/

/***** Micro depletion data **************************************************/

enum block_MDEP {
  MDEP_PTR_GCU = LIST_DATA_SIZE + PARAM_N_COMMON,
  MDEP_PTR_MAT,
  MDEP_N_REA,
  MDEP_PTR_REA,
  MDEP_PTR_KEY,	
  MDEP_VOLUME,
  MDEP_VF,
  MDEP_PTR_AVG_ADENS,
  MDEP_PTR_BTCH_AVG_ADENS,
  MDEP_BLOCK_SIZE
};

enum block_MDEP_MAT {
  MDEP_MAT_PTR_MAT = LIST_DATA_SIZE,
  MDEP_MAT_PTR_REA,
  MDEP_MAT_BLOCK_SIZE
};

enum block_MDEP_REA {
  MDEP_REA_IDX = LIST_DATA_SIZE,
  MDEP_REA_PTR_ISO,
  MDEP_REA_PTR_REA,
  MDEP_REA_EMIN,
  MDEP_REA_PARTIAL_IDX,
  MDEP_REA_MT,
  MDEP_REA_BLOCK_SIZE
};

/*****************************************************************************/

/***** Material volumes list *************************************************/

enum block_MVOL {
  MVOL_PTR_MAT = LIST_DATA_SIZE,
  MVOL_REG_IDX,
  MVOL_VOL,
  MVOL_BLOCK_SIZE
};

/*****************************************************************************/

/***** Additional cross sections to majorant *********************************/

enum block_MAJORANT_EXTRA {
  MAJORANT_EXTRA_TYPE = LIST_DATA_SIZE,
  MAJORANT_EXTRA_PTR_NUC,
  MAJORANT_EXTRA_PTR_MAT,
  MAJORANT_EXTRA_FRAC,
  MAJORANT_EXTRA_BLOCK_SIZE
};

/*****************************************************************************/

/***** Mora output ***********************************************************/

enum block_MORA {
  MORA_PTR_FNAME = LIST_DATA_SIZE,
  MORA_PTR_UNIV,
  MORA_PTR_EG,
  MORA_N_EG,
  MORA_N_COS,
  MORA_PTR_TOT,
  MORA_PTR_CAPT,
  MORA_PTR_FISS,
  MORA_PTR_SCATTP,
  MORA_PTR_SCATTW,
  MORA_PTR_PNU,
  MORA_PTR_DNU,
  MORA_PTR_KAPPA,
  MORA_PTR_CHIP,
  MORA_PTR_CHID,
  MORA_PTR_FLX,
  MORA_BLOCK_SIZE
};

/*****************************************************************************/

/***** Group constant generation *********************************************/

enum block_GCU {
  GCU_PTR_UNIV = LIST_DATA_SIZE,
  GCU_PTR_ADF,
  GCU_B1_CONV,

/* Critical spectrum correction for burnup */
  
  GCU_PTR_BURNUP_SPEC_CORR,

/* T√§√§ varmaan my√∂hemmin pois */

  GCU_PTR_MORA,

/* Discontinuity factors, etc. */

  GCU_RES_FG_DF_HET_SURF_FLUX,
  GCU_RES_FG_DF_HET_CORN_FLUX,
  GCU_RES_FG_DF_HET_VOL_FLUX,
  GCU_RES_FG_DF_SURF_DF,
  GCU_RES_FG_DF_CORN_DF,
  GCU_RES_FG_DF_SURF_IN_CURR,
  GCU_RES_FG_DF_SURF_OUT_CURR,
  GCU_RES_FG_DF_SURF_NET_CURR,
  GCU_RES_FG_DF_MID_IN_CURR,
  GCU_RES_FG_DF_MID_OUT_CURR,
  GCU_RES_FG_DF_MID_NET_CURR,
  GCU_RES_FG_DF_CORN_IN_CURR,
  GCU_RES_FG_DF_CORN_OUT_CURR,
  GCU_RES_FG_DF_CORN_NET_CURR,
  GCU_RES_FG_DF_HOM_SURF_FLUX,
  GCU_RES_FG_DF_HOM_CORN_FLUX,
  GCU_RES_FG_DF_HOM_VOL_FLUX,

/* Sign moments of discontinuity factors */

  GCU_RES_FG_DF_SGN_HET_SURF_FLUX,
  GCU_RES_FG_DF_SGN_HOM_SURF_FLUX,
  GCU_RES_FG_DF_SGN_SURF_DF,
  GCU_RES_FG_DF_SGN_SURF_IN_CURR,
  GCU_RES_FG_DF_SGN_SURF_OUT_CURR,
  GCU_RES_FG_DF_SGN_SURF_NET_CURR,

/* Diffusion coefficient for E.D */

  GCU_RES_DIFFCOEF_ED,

/* Micro depletion */

  GCU_PTR_MDEP,
  GCU_RES_FG_MICRO_DEP_ADENS,
  GCU_RES_FG_MICRO_DEP_XS,

/* Pin-power distributions */

  GCU_PTR_PPW,
  GCU_RES_FG_PPW_POW,
  GCU_RES_FG_PPW_HOM_FLUX,
  GCU_RES_FG_PPW_FF,
  GCU_RES_FG_PPW_XYZ,

/* Albedos */

  GCU_PTR_ALB,
  GCU_RES_FG_ALB_IN_CURR,
  GCU_RES_FG_ALB_OUT_CURR,
  GCU_RES_FG_TOT_ALB,
  GCU_RES_FG_PART_ALB,

/* Micro-group data */

  GCU_MICRO_FLX,
  GCU_MICRO_FLX_XX,
  GCU_MICRO_FLX_XY,
  GCU_MICRO_FLX_XZ,
  GCU_MICRO_FLX_YY,
  GCU_MICRO_FLX_YZ,
  GCU_MICRO_FLX_ZZ,
  GCU_MICRO_FISS_FLX,
  GCU_MICRO_TOT,
  GCU_MICRO_ABS,
  GCU_MICRO_FISS,
  GCU_MICRO_NSF,
  GCU_MICRO_FISSE,
  GCU_MICRO_INV_V,
  GCU_MICRO_CHIT,
  GCU_MICRO_CHIP,
  GCU_MICRO_CHID,
  GCU_MICRO_SCATT0,
  GCU_MICRO_SCATT1,
  GCU_MICRO_SCATT2,
  GCU_MICRO_SCATT3,
  GCU_MICRO_SCATT4,
  GCU_MICRO_SCATT5,
  GCU_MICRO_SCATT6,
  GCU_MICRO_SCATT7,
  GCU_MICRO_SCATTP0,
  GCU_MICRO_SCATTP1,
  GCU_MICRO_SCATTP2,
  GCU_MICRO_SCATTP3,
  GCU_MICRO_SCATTP4,
  GCU_MICRO_SCATTP5,
  GCU_MICRO_SCATTP6,
  GCU_MICRO_SCATTP7,
  GCU_MICRO_I135_YIELD,
  GCU_MICRO_XE135_YIELD,
  GCU_MICRO_XE135M_YIELD,
  GCU_MICRO_PM147_YIELD,
  GCU_MICRO_PM148_YIELD,
  GCU_MICRO_PM148M_YIELD,
  GCU_MICRO_PM149_YIELD,
  GCU_MICRO_SM149_YIELD,
  GCU_MICRO_I135_ABS,
  GCU_MICRO_XE135_ABS,
  GCU_MICRO_XE135M_ABS,
  GCU_MICRO_PM147_ABS,
  GCU_MICRO_PM148_ABS,
  GCU_MICRO_PM148M_ABS,
  GCU_MICRO_PM149_ABS,
  GCU_MICRO_SM149_ABS,
  GCU_MICRO_XE135_MACRO_ABS,
  GCU_MICRO_XE135M_MACRO_ABS,
  GCU_MICRO_SM149_MACRO_ABS,
  GCU_MICRO_ADF_SURF_FLUX,
  GCU_MICRO_ADF_CORN_FLUX,
  GCU_MICRO_ADF_CELL_FLUX,
  GCU_MICRO_ADF_SURF_IN_CURR,
  GCU_MICRO_ADF_SURF_OUT_CURR,
  GCU_MICRO_ADF_MID_IN_CURR,
  GCU_MICRO_ADF_MID_OUT_CURR,
  GCU_MICRO_ADF_CORN_IN_CURR,
  GCU_MICRO_ADF_CORN_OUT_CURR,
  GCU_MICRO_ADF_SGN_SURF_FLUX,
  GCU_MICRO_ADF_SGN_SURF_IN_CURR,
  GCU_MICRO_ADF_SGN_SURF_OUT_CURR,
  GCU_MICRO_B1_FLX,
  GCU_MICRO_B1_DIFFCOEF,
  GCU_MICRO_DIFFCOEF_ED,
  GCU_MICRO_PPW_POW,
  GCU_MICRO_PPW_XYZ,
  GCU_MICRO_ALB_IN_CURR,
  GCU_MICRO_ALB_OUT_CURR,
  GCU_MICRO_TRC,
  GCU_MICRO_TRC_FLX,
  GCU_MICRO_MICRO_DEP_XS,
  GCU_INF_FLX,
  GCU_INF_FLX_XX,
  GCU_INF_FLX_XY,
  GCU_INF_FLX_XZ,
  GCU_INF_FLX_YY,
  GCU_INF_FLX_YZ,
  GCU_INF_FLX_ZZ,
  GCU_INF_MICRO_FLX,
  GCU_INF_FISS_FLX,
  GCU_INF_KINF,
  GCU_INF_TOT,
  GCU_INF_CAPT,
  GCU_INF_FISS,
  GCU_INF_ABS,
  GCU_INF_NSF,
  GCU_INF_KAPPA,
  GCU_INF_INVV,
  GCU_INF_NUBAR,
  GCU_INF_RABSXS,
  GCU_INF_REMXS,
  GCU_INF_CHIT,
  GCU_INF_CHIP,
  GCU_INF_CHID,
  GCU_INF_S0,
  GCU_INF_S1,
  GCU_INF_S2,
  GCU_INF_S3,
  GCU_INF_S4,
  GCU_INF_S5,
  GCU_INF_S6,
  GCU_INF_S7,
  GCU_INF_SP0,
  GCU_INF_SP1,
  GCU_INF_SP2,
  GCU_INF_SP3,
  GCU_INF_SP4,
  GCU_INF_SP5,
  GCU_INF_SP6,
  GCU_INF_SP7,
  GCU_INF_SCATT0,
  GCU_INF_SCATT1,
  GCU_INF_SCATT2,
  GCU_INF_SCATT3,
  GCU_INF_SCATT4,
  GCU_INF_SCATT5,
  GCU_INF_SCATT6,
  GCU_INF_SCATT7,
  GCU_INF_SCATTP0,
  GCU_INF_SCATTP1,
  GCU_INF_SCATTP2,
  GCU_INF_SCATTP3,
  GCU_INF_SCATTP4,
  GCU_INF_SCATTP5,
  GCU_INF_SCATTP6,
  GCU_INF_SCATTP7,
  GCU_INF_I135_YIELD,
  GCU_INF_XE135_YIELD,
  GCU_INF_XE135M_YIELD,
  GCU_INF_PM147_YIELD,
  GCU_INF_PM148_YIELD,
  GCU_INF_PM148M_YIELD,
  GCU_INF_PM149_YIELD,
  GCU_INF_SM149_YIELD,
  GCU_INF_I135_ABS,
  GCU_INF_XE135_ABS,
  GCU_INF_XE135M_ABS,
  GCU_INF_PM147_ABS,
  GCU_INF_PM148_ABS,
  GCU_INF_PM148M_ABS,
  GCU_INF_PM149_ABS,
  GCU_INF_SM149_ABS,
  GCU_INF_XE135_MACRO_ABS,
  GCU_INF_XE135M_MACRO_ABS,
  GCU_INF_SM149_MACRO_ABS,
  GCU_INF_TRANSPXS,
  GCU_INF_DIFFCOEF,
  GCU_B1_KEFF,
  GCU_B1_KINF,
  GCU_B1_B2,
  GCU_B1_ERR,
  GCU_B1_FISS_FLX,
  GCU_B1_MICRO_FLX,
  GCU_B1_FLX,
  GCU_B1_TOT,
  GCU_B1_CAPT,
  GCU_B1_FISS,
  GCU_B1_ABS,
  GCU_B1_NSF,
  GCU_B1_KAPPA,
  GCU_B1_INVV,
  GCU_B1_NUBAR,
  GCU_B1_RABSXS,
  GCU_B1_REMXS,
  GCU_B1_CHIT,
  GCU_B1_CHIP,
  GCU_B1_CHID,
  GCU_B1_S0,
  GCU_B1_S1,
  GCU_B1_S2,
  GCU_B1_S3,
  GCU_B1_S4,
  GCU_B1_S5,
  GCU_B1_S6,
  GCU_B1_S7,
  GCU_B1_SP0,
  GCU_B1_SP1,
  GCU_B1_SP2,
  GCU_B1_SP3,
  GCU_B1_SP4,
  GCU_B1_SP5,
  GCU_B1_SP6,
  GCU_B1_SP7,
  GCU_B1_SCATT0,
  GCU_B1_SCATT1,
  GCU_B1_SCATT2,
  GCU_B1_SCATT3,
  GCU_B1_SCATT4,
  GCU_B1_SCATT5,
  GCU_B1_SCATT6,
  GCU_B1_SCATT7,
  GCU_B1_SCATTP0,
  GCU_B1_SCATTP1,
  GCU_B1_SCATTP2,
  GCU_B1_SCATTP3,
  GCU_B1_SCATTP4,
  GCU_B1_SCATTP5,
  GCU_B1_SCATTP6,
  GCU_B1_SCATTP7,
  GCU_B1_I135_YIELD,
  GCU_B1_XE135_YIELD,
  GCU_B1_XE135M_YIELD,
  GCU_B1_PM147_YIELD,
  GCU_B1_PM148_YIELD,
  GCU_B1_PM148M_YIELD,
  GCU_B1_PM149_YIELD,
  GCU_B1_SM149_YIELD,
  GCU_B1_I135_ABS,
  GCU_B1_XE135_ABS,
  GCU_B1_XE135M_ABS,
  GCU_B1_PM147_ABS,
  GCU_B1_PM148_ABS,
  GCU_B1_PM148M_ABS,
  GCU_B1_PM149_ABS,
  GCU_B1_SM149_ABS,
  GCU_B1_XE135_MACRO_ABS,
  GCU_B1_XE135M_MACRO_ABS,
  GCU_B1_SM149_MACRO_ABS,
  GCU_B1_TRANSPXS,
  GCU_B1_DIFFCOEF,

  GCU_MEULEKAMP_TOT_FISS,
  GCU_MEULEKAMP_BETA_EFF,
  GCU_MEULEKAMP_LAMBDA,

  GCU_BUF_CMM_CUMU_R2,
  GCU_CMM_CUMU_R2,
  GCU_CMM_MIGR_AREA,
  GCU_CMM_REMXS,
  GCU_CMM_DIFFCOEF,
  GCU_CMM_TRANSPXS,
  GCU_CMM_DIFFCOEF_X,
  GCU_CMM_TRANSPXS_X,
  GCU_CMM_DIFFCOEF_Y,
  GCU_CMM_TRANSPXS_Y,
  GCU_CMM_DIFFCOEF_Z,
  GCU_CMM_TRANSPXS_Z,

  GCU_TRC_TRANSPXS,
  GCU_TRC_DIFFCOEF,
  GCU_PTR_FIRST_STAT,
  GCU_PTR_LAST_STAT,
  GCU_BLOCK_SIZE
};

/*****************************************************************************/

/***** Depletion branches ****************************************************/

/* Vai olisko "deviation", tms. parempi nimi? */

enum block_DEP_BRA {
  DEP_BRA_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  DEP_BRA_OPTIONS,
  DEP_BRA_PTR_STP,
  DEP_BRA_PTR_VAR,
  DEP_BRA_PTR_REPLACE_MAT,
  DEP_BRA_PTR_REPLACE_UNI,
  DEP_BRA_PTR_TRANS,
  DEP_BRA_PTR_GCU,
  DEP_BRA_NORM,
  DEP_BRA_ZERO_XE,
  DEP_BRA_ZERO_SM,
  DEP_BRA_BLOCK_SIZE
};

/* Change in material state */

enum block_DEP_BRA_STP {
  DEP_BRA_STP_PTR_MAT = LIST_DATA_SIZE,
  DEP_BRA_STP_DENSITY,
  DEP_BRA_STP_TEMP,
  DEP_BRA_STP_PTR_SAB,
  DEP_BRA_STP_BLOCK_SIZE
};

enum block_DEP_BRA_STP_SAB {
  DEP_BRA_STP_SAB_PTR_THERM = LIST_DATA_SIZE,
  DEP_BRA_STP_SAB_PTR_LIB1,
  DEP_BRA_STP_SAB_PTR_LIB2,
  DEP_BRA_STP_SAB_BLOCK_SIZE
};

/* Variable (to be passed into output) */

enum block_DEP_BRA_VAR {
  DEP_BRA_VAR_PTR_NAME = LIST_DATA_SIZE,
  DEP_BRA_VAR_PTR_VALUE,
  DEP_BRA_VAR_BLOCK_SIZE
};

/* Replace material */

enum block_DEP_BRA_REPLACE_MAT {
  DEP_BRA_REPLACE_MAT_PTR_MAT1 = LIST_DATA_SIZE,
  DEP_BRA_REPLACE_MAT_PTR_MAT2,
  DEP_BRA_REPLACE_MAT_BLOCK_SIZE
};

/* Replace universe */

enum block_DEP_BRA_REPLACE_UNI {
  DEP_BRA_REPLACE_UNI_PTR_UNI1 = LIST_DATA_SIZE,
  DEP_BRA_REPLACE_UNI_PTR_UNI2,
  DEP_BRA_REPLACE_UNI_BLOCK_SIZE
};

/* Transformation */

enum block_DEP_BRA_TRANS {
  DEP_BRA_TRANS_PTR_UNI = LIST_DATA_SIZE,
  DEP_BRA_TRANS_PTR_TRANS,
  DEP_BRA_TRANS_BLOCK_SIZE
};

/*****************************************************************************/

/***** Coefficient calculations **********************************************/

enum block_COEF {
  COEF_N_BU = LIST_DATA_SIZE + PARAM_N_COMMON,
  COEF_PTR_BU_PTS,
  COEF_N_TOT,
  COEF_PTR_MTX,
  COEF_BLOCK_SIZE
};

enum block_COEF_MTX {
  COEF_MTX_N_BRA = LIST_DATA_SIZE,
  COEF_MTX_N_CUMU,
  COEF_MTX_PTR_BRA,
  COEF_MTX_PTR_VAR,
  COEF_MTX_BLOCK_SIZE
};

/*****************************************************************************/

/***** History variation calculations ****************************************/

enum block_HISV {
  HISV_PTR_VAR = LIST_DATA_SIZE + PARAM_N_COMMON,
  HISV_BLOCK_SIZE
};

enum block_HISV_VAR {
  HISV_VAR_N_VAR = LIST_DATA_SIZE,
  HISV_VAR_BU,
  HISV_VAR_PTR_VAR,
  HISV_VAR_BLOCK_SIZE
};

/*****************************************************************************/

/***** Case matrix calculations **********************************************/

enum block_CASEMTX {
  CASEMTX_PTR_NAME = LIST_DATA_SIZE + PARAM_N_COMMON,
  CASEMTX_N_HIS,
  CASEMTX_PTR_HIS,
  CASEMTX_PTR_COEF,
  CASEMTX_TOT_COEF_CALC,
  CASEMTX_COEF_CALC_TOT_RUNS,
  CASEMTX_BLOCK_SIZE
};

/*****************************************************************************/

/***** Transport correction **************************************************/

enum block_TRANSP_CORR {
  TRANSP_CORR_PTR_MAT = LIST_DATA_SIZE + PARAM_N_COMMON,
  TRANSP_CORR_FNAME,
  TRANSP_CORR_NG,
  TRANSP_CORR_PTR_ENE,
  TRANSP_CORR_NT,
  TRANSP_CORR_PTR_TEMP,
  TRANSP_CORR_PTR_DATA,
  TRANSP_CORR_EMIN,
  TRANSP_CORR_PTR_ISO,
  TRANSP_CORR_BLOCK_SIZE
};

/*****************************************************************************/

/***** Sensitivity response block ********************************************/

enum block_SENS_RESP {
  SENS_RESP_TYPE = LIST_DATA_SIZE + PARAM_N_COMMON,
  SENS_RESP_HAS_PARTIALS,
  SENS_RESP_PTR_NAME,
  SENS_RESP_PTR_DET1,
  SENS_RESP_PTR_DET2,
  SENS_RESP_DET1_P,
  SENS_RESP_DET2_P,
  SENS_RESP_DET1_N_BIN,
  SENS_RESP_DET2_N_BIN,
  SENS_RESP_DET_BIN_IDX,
  SENS_RESP_PTR_STAT,
  SENS_RESP_PTR_STAT_DIVIDER,
  SENS_RESP_PTR_UNC_STAT,
  SENS_RESP_PTR_VAR_STAT,
  SENS_RESP_BLOCK_SIZE
};

/*****************************************************************************/

/***** Sensitivity perturbation block ****************************************/

enum block_SENS_PERT {
  SENS_PERT_INDEX = LIST_DATA_SIZE + PARAM_N_COMMON,
  SENS_PERT_PTR_NAME,
  SENS_PERT_PTR_REA_LIST,
  SENS_PERT_PTR_MT_LIST,
  SENS_PERT_PTR_MAT_LIST,
  SENS_PERT_PTR_ZAI_LIST,
  SENS_PERT_PTR_EGRID,
  SENS_PERT_PTR_EGRID_VAL,
  SENS_PERT_EGRID_INTERP,
  SENS_PERT_BLOCK_SIZE
};

/*****************************************************************************/

/***** Event block array *****************************************************/

enum block_SENS_EBLOCK {
  SENS_EBLOCK_HIS_COUNT = LIFO_LIST_DATA_SIZE,
  SENS_EBLOCK_PTR_DATA,
  SENS_EBLOCK_BLOCK_SIZE
};

/*****************************************************************************/

/***** Data sample block *****************************************************/

enum block_SAMPLE {
  SAMPLE_MESH_MIN0 = LIST_DATA_SIZE + PARAM_N_COMMON,
  SAMPLE_MESH_MAX0,
  SAMPLE_MESH_N0,
  SAMPLE_MESH_MIN1,
  SAMPLE_MESH_MAX1,
  SAMPLE_MESH_N1,
  SAMPLE_MESH_MIN2,
  SAMPLE_MESH_MAX2,
  SAMPLE_MESH_N2,
  SAMPLE_BLOCK_SIZE
};

enum block_SENS
{
  SENS_PTR_EGRID = LIST_DATA_SIZE + PARAM_N_COMMON,
  SENS_PTR_MESH,
  SENS_N_MAT,
  SENS_N_ZAI,
  SENS_N_PERT,
  SENS_N_ENE,
  SENS_N_SPAT,
  SENS_N_MU,
  SENS_N_COV_BLOCK,
  SENS_PTR_ZAI_ARR,
  SENS_PTR_MAT_ARR,
  SENS_PERT_FLAGS,
  SENS_RESP_FLAGS,
  SENS_SCORE_FLAGS,
  SENS_PTR_PERT_INDICES,
  SENS_PTR_MAT_INDICES,
  SENS_PTR_ZAI_INDICES,
  SENS_PTR_MT_INDICES,
  SENS_MAX_SCATT_MOM,
  SENS_MAX_MT,
  SENS_MAX_XS_INDEX,
  SENS_PTR_RESP0,
  SENS_PTR_PERT0,
  SENS_PTR_VOID_MAT,
  SENS_MAX_LABEL,
  SENS_PTR_REA_LIST,
  SENS_PTR_MT_LIST,
  SENS_MU_BIN_TYPE,
  SENS_BLOCK_SIZE
};

/*****************************************************************************/

/***** Covariance matrix block ***********************************************/

enum block_COVMTX
{
  COVMTX_ZAI1 = LIST_DATA_SIZE,
  COVMTX_ZAI2,
  COVMTX_MT1,
  COVMTX_MT2,
  COVMTX_NG,
  COVMTX_DATATYPE,
  COVMTX_PTR_EGRID,
  COVMTX_PTR_DATA,
  COVMTX_BLOCK_SIZE
};

/*****************************************************************************/

/***** Covariance block block ************************************************/

enum block_COVBLOCK
{
  COVBLOCK_ZAI1 = LIST_DATA_SIZE,
  COVBLOCK_ORDER,
  COVBLOCK_PTR_ZAIMT_ARRAY,
  COVBLOCK_PTR_COVMTX_ARRAY,
  COVBLOCK_PTR_MATRIX_DATA,
  COVBLOCK_NG,
  COVBLOCK_PTR_EGRID,
  COVBLOCK_PTR_SENS_INDICES,
  COVBLOCK_BLOCK_SIZE
};

/*****************************************************************************/

/***** On-the-fly burnup routine *********************************************/

enum block_OTF_BURN {
  OTF_BURN_PTR_COMP = LIST_DATA_SIZE,
  OTF_BURN_PTR_NUCLIDE,
  OTF_BURN_PTR_MAT,
  OTF_BURN_PTR_MAJ,
  OTF_BURN_ADENS0,
  OTF_BURN_ADENS,
  OTF_BURN_PTR_REA,
  OTF_BURN_PROCESSED,  
  OTF_BURN_PTR_TOT_XS,
  OTF_BURN_BLOCK_SIZE
};

enum block_OTF_BURN_REA {
  OTF_BURN_REA_PTR_XS = LIST_DATA_SIZE,
  OTF_BURN_REA_PTR_REA,
  OTF_BURN_REA_MT,
  OTF_BURN_REA_PTR_TGT,
  OTF_BURN_REA_PTR_FISSY,
  OTF_BURN_REA_BLOCK_SIZE
};

enum block_OTF_BURN_FISSY {
  OTF_BURN_FISSY_PTR_YLD = LIST_DATA_SIZE,
  OTF_BURN_FISSY_PTR_TGT,
  OTF_BURN_FISSY_BLOCK_SIZE
};

/*****************************************************************************/
